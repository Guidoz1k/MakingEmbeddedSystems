
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007900  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007b98  08007b98  00017b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007bbc  08007bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000040e4  24000000  08007bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000230  240040e4  0800bca8  000240e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24004314  0800bca8  00024314  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000240e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025800  00000000  00000000  00024112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003ae0  00000000  00000000  00049912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001350  00000000  00000000  0004d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0003915b  00000000  00000000  0004e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0001836f  00000000  00000000  000878a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00171258  00000000  00000000  0009fc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      00000053  00000000  00000000  00210e6a  2**0
                  CONTENTS, READONLY
 16 .debug_ranges 000011f0  00000000  00000000  00210ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005128  00000000  00000000  002120b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240040e4 	.word	0x240040e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007b80 	.word	0x08007b80

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240040e8 	.word	0x240040e8
 80002d4:	08007b80 	.word	0x08007b80

080002d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ea:	463b      	mov	r3, r7
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
 80002fa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fc:	4b2f      	ldr	r3, [pc, #188]	; (80003bc <MX_ADC1_Init+0xe4>)
 80002fe:	4a30      	ldr	r2, [pc, #192]	; (80003c0 <MX_ADC1_Init+0xe8>)
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000308:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <MX_ADC1_Init+0xe4>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000314:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000316:	2204      	movs	r2, #4
 8000318:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800031a:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_ADC1_Init+0xe4>)
 800031c:	2200      	movs	r2, #0
 800031e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000322:	2200      	movs	r2, #0
 8000324:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000328:	2201      	movs	r2, #1
 800032a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_ADC1_Init+0xe4>)
 800032e:	2200      	movs	r2, #0
 8000330:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_ADC1_Init+0xe4>)
 800033a:	2200      	movs	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000340:	2200      	movs	r2, #0
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000346:	2200      	movs	r2, #0
 8000348:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_ADC1_Init+0xe4>)
 800034c:	2200      	movs	r2, #0
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000352:	2200      	movs	r2, #0
 8000354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <MX_ADC1_Init+0xe4>)
 800035a:	f001 ffd3 	bl	8002304 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000364:	f001 fb7e 	bl	8001a64 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4619      	mov	r1, r3
 8000372:	4812      	ldr	r0, [pc, #72]	; (80003bc <MX_ADC1_Init+0xe4>)
 8000374:	f003 f98c 	bl	8003690 <HAL_ADCEx_MultiModeConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800037e:	f001 fb71 	bl	8001a64 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_ADC1_Init+0xec>)
 8000384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2306      	movs	r3, #6
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038a:	2300      	movs	r3, #0
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800038e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000392:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000394:	2304      	movs	r3, #4
 8000396:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_ADC1_Init+0xe4>)
 80003a6:	f002 fb4d 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80003b0:	f001 fb58 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3728      	adds	r7, #40	; 0x28
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	2400420c 	.word	0x2400420c
 80003c0:	40022000 	.word	0x40022000
 80003c4:	0c900008 	.word	0x0c900008

080003c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b0b8      	sub	sp, #224	; 0xe0
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	22bc      	movs	r2, #188	; 0xbc
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f007 fbc1 	bl	8007b70 <memset>
  if(adcHandle->Instance==ADC1)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a2a      	ldr	r2, [pc, #168]	; (800049c <HAL_ADC_MspInit+0xd4>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d14d      	bne.n	8000494 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80003fe:	2304      	movs	r3, #4
 8000400:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000402:	2309      	movs	r3, #9
 8000404:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000406:	2304      	movs	r3, #4
 8000408:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800040a:	2302      	movs	r3, #2
 800040c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800040e:	2302      	movs	r3, #2
 8000410:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000412:	23c0      	movs	r3, #192	; 0xc0
 8000414:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000416:	2320      	movs	r3, #32
 8000418:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800041a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800041e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000420:	2300      	movs	r3, #0
 8000422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4618      	mov	r0, r3
 800042c:	f004 ff18 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000436:	f001 fb15 	bl	8001a64 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <HAL_ADC_MspInit+0xd8>)
 800043c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000440:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <HAL_ADC_MspInit+0xd8>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_ADC_MspInit+0xd8>)
 800044c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <HAL_ADC_MspInit+0xd8>)
 800045a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045e:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <HAL_ADC_MspInit+0xd8>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <HAL_ADC_MspInit+0xd8>)
 800046a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000476:	2340      	movs	r3, #64	; 0x40
 8000478:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800047c:	2303      	movs	r3, #3
 800047e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800048c:	4619      	mov	r1, r3
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <HAL_ADC_MspInit+0xdc>)
 8000490:	f003 faec 	bl	8003a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000494:	bf00      	nop
 8000496:	37e0      	adds	r7, #224	; 0xe0
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40022000 	.word	0x40022000
 80004a0:	58024400 	.word	0x58024400
 80004a4:	58020000 	.word	0x58020000

080004a8 <lcd_e>:
static uint16_t adc_old = 0;
static uint16_t needs_update = 0;

//////////////////////////////////////////////////////////////////////// LCD "ll" functions

static void lcd_e(uint8_t status){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
    if(status)
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d005      	beq.n	80004c4 <lcd_e+0x1c>
        HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2102      	movs	r1, #2
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <lcd_e+0x30>)
 80004be:	f003 fc9d 	bl	8003dfc <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
}
 80004c2:	e004      	b.n	80004ce <lcd_e+0x26>
        HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2102      	movs	r1, #2
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <lcd_e+0x30>)
 80004ca:	f003 fc97 	bl	8003dfc <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	58021000 	.word	0x58021000

080004dc <lcd_rs>:

static void lcd_rs(uint8_t status){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
    if(status)
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d005      	beq.n	80004f8 <lcd_rs+0x1c>
    	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2101      	movs	r1, #1
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <lcd_rs+0x30>)
 80004f2:	f003 fc83 	bl	8003dfc <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
}
 80004f6:	e004      	b.n	8000502 <lcd_rs+0x26>
    	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <lcd_rs+0x30>)
 80004fe:	f003 fc7d 	bl	8003dfc <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	58021000 	.word	0x58021000

08000510 <lcd_data>:

static void lcd_data(uint8_t data){
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
    if(data & (1 << 0))
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	2b00      	cmp	r3, #0
 8000522:	d005      	beq.n	8000530 <lcd_data+0x20>
    	HAL_GPIO_WritePin(LCD_D0, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2101      	movs	r1, #1
 8000528:	483d      	ldr	r0, [pc, #244]	; (8000620 <lcd_data+0x110>)
 800052a:	f003 fc67 	bl	8003dfc <HAL_GPIO_WritePin>
 800052e:	e004      	b.n	800053a <lcd_data+0x2a>
    else
    	HAL_GPIO_WritePin(LCD_D0, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <lcd_data+0x110>)
 8000536:	f003 fc61 	bl	8003dfc <HAL_GPIO_WritePin>

    if(data & (1 << 1))
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f003 0302 	and.w	r3, r3, #2
 8000540:	2b00      	cmp	r3, #0
 8000542:	d005      	beq.n	8000550 <lcd_data+0x40>
    	HAL_GPIO_WritePin(LCD_D1, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2102      	movs	r1, #2
 8000548:	4835      	ldr	r0, [pc, #212]	; (8000620 <lcd_data+0x110>)
 800054a:	f003 fc57 	bl	8003dfc <HAL_GPIO_WritePin>
 800054e:	e004      	b.n	800055a <lcd_data+0x4a>
    else
    	HAL_GPIO_WritePin(LCD_D1, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2102      	movs	r1, #2
 8000554:	4832      	ldr	r0, [pc, #200]	; (8000620 <lcd_data+0x110>)
 8000556:	f003 fc51 	bl	8003dfc <HAL_GPIO_WritePin>

    if(data & (1 << 2))
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <lcd_data+0x60>
    	HAL_GPIO_WritePin(LCD_D2, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2104      	movs	r1, #4
 8000568:	482d      	ldr	r0, [pc, #180]	; (8000620 <lcd_data+0x110>)
 800056a:	f003 fc47 	bl	8003dfc <HAL_GPIO_WritePin>
 800056e:	e004      	b.n	800057a <lcd_data+0x6a>
    else
    	HAL_GPIO_WritePin(LCD_D2, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	482a      	ldr	r0, [pc, #168]	; (8000620 <lcd_data+0x110>)
 8000576:	f003 fc41 	bl	8003dfc <HAL_GPIO_WritePin>

    if(data & (1 << 3))
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f003 0308 	and.w	r3, r3, #8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d005      	beq.n	8000590 <lcd_data+0x80>
    	HAL_GPIO_WritePin(LCD_D3, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2108      	movs	r1, #8
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <lcd_data+0x110>)
 800058a:	f003 fc37 	bl	8003dfc <HAL_GPIO_WritePin>
 800058e:	e004      	b.n	800059a <lcd_data+0x8a>
    else
    	HAL_GPIO_WritePin(LCD_D3, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2108      	movs	r1, #8
 8000594:	4822      	ldr	r0, [pc, #136]	; (8000620 <lcd_data+0x110>)
 8000596:	f003 fc31 	bl	8003dfc <HAL_GPIO_WritePin>

    if(data & (1 << 4))
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	f003 0310 	and.w	r3, r3, #16
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <lcd_data+0xa0>
    	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	481d      	ldr	r0, [pc, #116]	; (8000620 <lcd_data+0x110>)
 80005aa:	f003 fc27 	bl	8003dfc <HAL_GPIO_WritePin>
 80005ae:	e004      	b.n	80005ba <lcd_data+0xaa>
    else
    	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	481a      	ldr	r0, [pc, #104]	; (8000620 <lcd_data+0x110>)
 80005b6:	f003 fc21 	bl	8003dfc <HAL_GPIO_WritePin>

    if(data & (1 << 5))
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d005      	beq.n	80005d0 <lcd_data+0xc0>
    	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2120      	movs	r1, #32
 80005c8:	4815      	ldr	r0, [pc, #84]	; (8000620 <lcd_data+0x110>)
 80005ca:	f003 fc17 	bl	8003dfc <HAL_GPIO_WritePin>
 80005ce:	e004      	b.n	80005da <lcd_data+0xca>
    else
    	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2120      	movs	r1, #32
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <lcd_data+0x110>)
 80005d6:	f003 fc11 	bl	8003dfc <HAL_GPIO_WritePin>

    if(data & (1 << 6))
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d005      	beq.n	80005f0 <lcd_data+0xe0>
    	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <lcd_data+0x110>)
 80005ea:	f003 fc07 	bl	8003dfc <HAL_GPIO_WritePin>
 80005ee:	e004      	b.n	80005fa <lcd_data+0xea>
    else
    	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <lcd_data+0x110>)
 80005f6:	f003 fc01 	bl	8003dfc <HAL_GPIO_WritePin>

    if(data & (1 << 7))
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	da05      	bge.n	800060e <lcd_data+0xfe>
    	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <lcd_data+0x110>)
 8000608:	f003 fbf8 	bl	8003dfc <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
}
 800060c:	e004      	b.n	8000618 <lcd_data+0x108>
    	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <lcd_data+0x110>)
 8000614:	f003 fbf2 	bl	8003dfc <HAL_GPIO_WritePin>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	58020c00 	.word	0x58020c00

08000624 <lcd_clear>:

static void lcd_clear(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <lcd_clear+0x24>)
 800062e:	f003 fbe5 	bl	8003dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2102      	movs	r1, #2
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <lcd_clear+0x24>)
 8000638:	f003 fbe0 	bl	8003dfc <HAL_GPIO_WritePin>
    lcd_data(0);
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ff67 	bl	8000510 <lcd_data>
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	58021000 	.word	0x58021000

0800064c <lcd_enable>:

static void lcd_enable(void){ // generate E pin pulse
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    lcd_e(0);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ff29 	bl	80004a8 <lcd_e>
    HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f001 fbf2 	bl	8001e40 <HAL_Delay>
    lcd_e(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff23 	bl	80004a8 <lcd_e>
    HAL_Delay(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f001 fbec 	bl	8001e40 <HAL_Delay>
    lcd_e(0);
 8000668:	2000      	movs	r0, #0
 800066a:	f7ff ff1d 	bl	80004a8 <lcd_e>
    HAL_Delay(1);
 800066e:	2001      	movs	r0, #1
 8000670:	f001 fbe6 	bl	8001e40 <HAL_Delay>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <lcd_config>:

static void lcd_config(uint8_t data){ // send config data to lcd
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    lcd_rs(0);
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ff2a 	bl	80004dc <lcd_rs>
    lcd_data(data);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff40 	bl	8000510 <lcd_data>
    lcd_enable();
 8000690:	f7ff ffdc 	bl	800064c <lcd_enable>
    lcd_clear();
 8000694:	f7ff ffc6 	bl	8000624 <lcd_clear>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <lcd_write>:

static void lcd_write(uint8_t data){ // send characters to lcd
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    lcd_rs(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff ff16 	bl	80004dc <lcd_rs>
    lcd_data(data);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff2c 	bl	8000510 <lcd_data>
    lcd_enable();
 80006b8:	f7ff ffc8 	bl	800064c <lcd_enable>
    lcd_clear();
 80006bc:	f7ff ffb2 	bl	8000624 <lcd_clear>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <lcd_pos>:

static void lcd_pos(uint8_t line, uint8_t pos){ // set cursor position
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
    if(line)            // display second line
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <lcd_pos+0x1e>
        pos |= 0x40;    // pos 0 of second line is mem pos 0x40
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e4:	71bb      	strb	r3, [r7, #6]
    pos |= 0x80;        // config bit set
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ec:	71bb      	strb	r3, [r7, #6]
    lcd_config(pos);
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffc1 	bl	8000678 <lcd_config>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <lcd_flush>:

static void lcd_flush(void){ // lcd reset
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
    lcd_rs(0);
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff feea 	bl	80004dc <lcd_rs>
    lcd_data(1);    // data = 0x01
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff ff01 	bl	8000510 <lcd_data>
    lcd_enable();
 800070e:	f7ff ff9d 	bl	800064c <lcd_enable>
    HAL_Delay(2);
 8000712:	2002      	movs	r0, #2
 8000714:	f001 fb94 	bl	8001e40 <HAL_Delay>
    lcd_clear();
 8000718:	f7ff ff84 	bl	8000624 <lcd_clear>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <lcd_init>:

static void lcd_init(void){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    lcd_config(0x06);   // display automatic cursor increment
 8000724:	2006      	movs	r0, #6
 8000726:	f7ff ffa7 	bl	8000678 <lcd_config>
    lcd_config(0x0C);   // active display with hidden cursor
 800072a:	200c      	movs	r0, #12
 800072c:	f7ff ffa4 	bl	8000678 <lcd_config>
    lcd_config(0x38);   // bit and pixel format
 8000730:	2038      	movs	r0, #56	; 0x38
 8000732:	f7ff ffa1 	bl	8000678 <lcd_config>
    lcd_flush();
 8000736:	f7ff ffe2 	bl	80006fe <lcd_flush>
    lcd_pos(0, 0);
 800073a:	2100      	movs	r1, #0
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff ffc3 	bl	80006c8 <lcd_pos>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <lcd_number>:

//////////////////////////////////////////////////////////////////////// LCD "hal" functions

// display number in LCD
static void lcd_number(uint32_t number, uint32_t size, uint32_t line, uint32_t pos){
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	603b      	str	r3, [r7, #0]
	uint32_t character = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
	uint32_t ten = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
	and a for like
		for(i = size; i > 0; i--)
	with a uint32_t i
*/

	number *= 10;
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	4613      	mov	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	lcd_pos(line, pos);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ffa7 	bl	80006c8 <lcd_pos>
	for(i = size; i > 0; i--){
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	e034      	b.n	80007ea <lcd_number+0xa2>
		ten = 1;
 8000780:	2301      	movs	r3, #1
 8000782:	61bb      	str	r3, [r7, #24]

		for(j = 1; j <= i; j++)
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	e008      	b.n	800079c <lcd_number+0x54>
			ten *= 10;
 800078a:	69ba      	ldr	r2, [r7, #24]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
		for(j = 1; j <= i; j++)
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	3301      	adds	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d9f2      	bls.n	800078a <lcd_number+0x42>

		if(i < size)
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d210      	bcs.n	80007ce <lcd_number+0x86>
			character = ((number / ten) % 10) + 48;
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <lcd_number+0xb4>)
 80007b6:	fba3 2301 	umull	r2, r3, r3, r1
 80007ba:	08da      	lsrs	r2, r3, #3
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	1aca      	subs	r2, r1, r3
 80007c6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	e005      	b.n	80007da <lcd_number+0x92>
		else
			character = (number / ten) + 48;
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	3330      	adds	r3, #48	; 0x30
 80007d8:	61fb      	str	r3, [r7, #28]

		lcd_write(character);
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff5e 	bl	80006a0 <lcd_write>
	for(i = size; i > 0; i--){
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1c7      	bne.n	8000780 <lcd_number+0x38>
	}
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	cccccccd 	.word	0xcccccccd

08000800 <lcd_string>:

// display string in LCD
static void lcd_string(const char *pointer, uint32_t line, uint32_t pos){
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
	uint32_t counter = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

	lcd_pos(line, pos);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff54 	bl	80006c8 <lcd_pos>
	while((counter++ < 16) && (*pointer != '\0'))
 8000820:	e006      	b.n	8000830 <lcd_string+0x30>
		lcd_write(*(pointer++));
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	60fa      	str	r2, [r7, #12]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff38 	bl	80006a0 <lcd_write>
	while((counter++ < 16) && (*pointer != '\0'))
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	617a      	str	r2, [r7, #20]
 8000836:	2b0f      	cmp	r3, #15
 8000838:	d803      	bhi.n	8000842 <lcd_string+0x42>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1ef      	bne.n	8000822 <lcd_string+0x22>
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <delay>:

//////////////////////////////////////////////////////////////////////// hal abstraction

// somehow I've managed to forget the HAL function's name everytime
static void delay(uint32_t time){
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f001 faf4 	bl	8001e40 <HAL_Delay>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <adc>:

// measure the ADC value, condition it to return 25 values
static uint32_t adc(){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
	uint32_t average = 50;
 8000866:	2332      	movs	r3, #50	; 0x32
 8000868:	607b      	str	r3, [r7, #4]
	uint32_t counter = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	int32_t value = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]

	for(counter = 0; counter < average; counter++){
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	e013      	b.n	80008a0 <adc+0x40>
		HAL_ADC_Start(&hadc1);
 8000878:	4816      	ldr	r0, [pc, #88]	; (80008d4 <adc+0x74>)
 800087a:	f001 fee3 	bl	8002644 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 800087e:	2101      	movs	r1, #1
 8000880:	4814      	ldr	r0, [pc, #80]	; (80008d4 <adc+0x74>)
 8000882:	f001 ffdd 	bl	8002840 <HAL_ADC_PollForConversion>
		value += HAL_ADC_GetValue(&hadc1);
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <adc+0x74>)
 8000888:	f002 f8ce 	bl	8002a28 <HAL_ADC_GetValue>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	4413      	add	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
		HAL_ADC_Stop(&hadc1);
 8000894:	480f      	ldr	r0, [pc, #60]	; (80008d4 <adc+0x74>)
 8000896:	f001 ff9f 	bl	80027d8 <HAL_ADC_Stop>
	for(counter = 0; counter < average; counter++){
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d3e7      	bcc.n	8000878 <adc+0x18>
	}

	value /= (average * 2420);	// value ranges from 27 to 2
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f640 1174 	movw	r1, #2420	; 0x974
 80008b0:	fb01 f303 	mul.w	r3, r1, r3
 80008b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b8:	60bb      	str	r3, [r7, #8]
	value -= 2;					// value ranges from 25 to 0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	3b02      	subs	r3, #2
 80008be:	60bb      	str	r3, [r7, #8]

	if(value < 0)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da01      	bge.n	80008ca <adc+0x6a>
		value = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]

	return value;
 80008ca:	68bb      	ldr	r3, [r7, #8]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	24004100 	.word	0x24004100

080008d8 <i2s>:

static void i2s(uint16_t right, uint16_t left){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	80fb      	strh	r3, [r7, #6]
 80008e4:	4613      	mov	r3, r2
 80008e6:	80bb      	strh	r3, [r7, #4]
	uint16_t buffer[2];
	//HAL_StatusTypeDef bob;

	buffer[0] = right;
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	81bb      	strh	r3, [r7, #12]
	buffer[1] = left;
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	81fb      	strh	r3, [r7, #14]
	HAL_I2S_Transmit(&hi2s1, buffer, 2, 0);
 80008f0:	f107 010c 	add.w	r1, r7, #12
 80008f4:	2300      	movs	r3, #0
 80008f6:	2202      	movs	r2, #2
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <i2s+0x30>)
 80008fa:	f003 fbd3 	bl	80040a4 <HAL_I2S_Transmit>

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	24004164 	.word	0x24004164

0800090c <button_check>:

// UI buttons abstraction
static enum _buttons button_check(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	enum _buttons output = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]
	uint32_t count = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]

	if(HAL_GPIO_ReadPin(BUT_UP)){
 800091a:	2104      	movs	r1, #4
 800091c:	481c      	ldr	r0, [pc, #112]	; (8000990 <button_check+0x84>)
 800091e:	f003 fa55 	bl	8003dcc <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d004      	beq.n	8000932 <button_check+0x26>
		count++;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	603b      	str	r3, [r7, #0]
		output = up;
 800092e:	2301      	movs	r3, #1
 8000930:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(BUT_DWN)){
 8000932:	2108      	movs	r1, #8
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <button_check+0x84>)
 8000936:	f003 fa49 	bl	8003dcc <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d004      	beq.n	800094a <button_check+0x3e>
		count++;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	603b      	str	r3, [r7, #0]
		output = down;
 8000946:	2302      	movs	r3, #2
 8000948:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(BUT_RGT)){
 800094a:	2110      	movs	r1, #16
 800094c:	4810      	ldr	r0, [pc, #64]	; (8000990 <button_check+0x84>)
 800094e:	f003 fa3d 	bl	8003dcc <HAL_GPIO_ReadPin>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d004      	beq.n	8000962 <button_check+0x56>
		count++;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	603b      	str	r3, [r7, #0]
		output = right;
 800095e:	2303      	movs	r3, #3
 8000960:	71fb      	strb	r3, [r7, #7]
	}
	if(HAL_GPIO_ReadPin(BUT_LFT)){
 8000962:	2120      	movs	r1, #32
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <button_check+0x84>)
 8000966:	f003 fa31 	bl	8003dcc <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d004      	beq.n	800097a <button_check+0x6e>
		count++;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	603b      	str	r3, [r7, #0]
		output = left;
 8000976:	2304      	movs	r3, #4
 8000978:	71fb      	strb	r3, [r7, #7]
	}

	if(count > 1)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d901      	bls.n	8000984 <button_check+0x78>
		output = invalid;
 8000980:	2300      	movs	r3, #0
 8000982:	71fb      	strb	r3, [r7, #7]

	return output;
 8000984:	79fb      	ldrb	r3, [r7, #7]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	58021000 	.word	0x58021000

08000994 <refresh>:

//////////////////////////////////////////////////////////////////////// HL functions

// refreshes the UI with updated info
static void refresh(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	lcd_string(menu[menu_option], 0, 0);
 8000998:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <refresh+0x120>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	4a46      	ldr	r2, [pc, #280]	; (8000ab8 <refresh+0x124>)
 80009a0:	4413      	add	r3, r2
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff2a 	bl	8000800 <lcd_string>
	lcd_string("                ", 1, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2101      	movs	r1, #1
 80009b0:	4842      	ldr	r0, [pc, #264]	; (8000abc <refresh+0x128>)
 80009b2:	f7ff ff25 	bl	8000800 <lcd_string>
	lcd_number(menu_option, 1, 1, 0);
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <refresh+0x120>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	2300      	movs	r3, #0
 80009be:	2201      	movs	r2, #1
 80009c0:	2101      	movs	r1, #1
 80009c2:	f7ff fec1 	bl	8000748 <lcd_number>

	switch(menu_option){
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <refresh+0x120>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b07      	cmp	r3, #7
 80009cc:	d870      	bhi.n	8000ab0 <refresh+0x11c>
 80009ce:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <refresh+0x40>)
 80009d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d4:	080009f5 	.word	0x080009f5
 80009d8:	08000a07 	.word	0x08000a07
 80009dc:	08000a19 	.word	0x08000a19
 80009e0:	08000a35 	.word	0x08000a35
 80009e4:	08000a51 	.word	0x08000a51
 80009e8:	08000a63 	.word	0x08000a63
 80009ec:	08000a75 	.word	0x08000a75
 80009f0:	08000a93 	.word	0x08000a93
	case 0:
		lcd_number(sound_config.vol1, 2, 1, 6);
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <refresh+0x12c>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	2306      	movs	r3, #6
 80009fc:	2201      	movs	r2, #1
 80009fe:	2102      	movs	r1, #2
 8000a00:	f7ff fea2 	bl	8000748 <lcd_number>
		break;
 8000a04:	e054      	b.n	8000ab0 <refresh+0x11c>
	case 1:
		lcd_number(sound_config.vol2, 2, 1, 6);
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <refresh+0x12c>)
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2102      	movs	r1, #2
 8000a12:	f7ff fe99 	bl	8000748 <lcd_number>
		break;
 8000a16:	e04b      	b.n	8000ab0 <refresh+0x11c>
	case 2:
		lcd_string(wave_menu[sound_config.shape1], 1, 4);
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <refresh+0x12c>)
 8000a1a:	791b      	ldrb	r3, [r3, #4]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4613      	mov	r3, r2
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	4413      	add	r3, r2
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <refresh+0x130>)
 8000a26:	4413      	add	r3, r2
 8000a28:	2204      	movs	r2, #4
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fee7 	bl	8000800 <lcd_string>
		break;
 8000a32:	e03d      	b.n	8000ab0 <refresh+0x11c>
	case 3:
		lcd_string(wave_menu[sound_config.shape2], 1, 4);
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <refresh+0x12c>)
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <refresh+0x130>)
 8000a42:	4413      	add	r3, r2
 8000a44:	2204      	movs	r2, #4
 8000a46:	2101      	movs	r1, #1
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fed9 	bl	8000800 <lcd_string>
		break;
 8000a4e:	e02f      	b.n	8000ab0 <refresh+0x11c>
	case 4:
		lcd_number(sound_config.harmonics1, 1, 1, 7);
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <refresh+0x12c>)
 8000a52:	88db      	ldrh	r3, [r3, #6]
 8000a54:	4618      	mov	r0, r3
 8000a56:	2307      	movs	r3, #7
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	f7ff fe74 	bl	8000748 <lcd_number>
		break;
 8000a60:	e026      	b.n	8000ab0 <refresh+0x11c>
	case 5:
		lcd_number(sound_config.harmonics2, 1, 1, 7);
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <refresh+0x12c>)
 8000a64:	891b      	ldrh	r3, [r3, #8]
 8000a66:	4618      	mov	r0, r3
 8000a68:	2307      	movs	r3, #7
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	f7ff fe6b 	bl	8000748 <lcd_number>
		break;
 8000a72:	e01d      	b.n	8000ab0 <refresh+0x11c>
	case 6:
		lcd_string(octave_menu[sound_config.octave1], 1, 5);
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <refresh+0x12c>)
 8000a76:	7a9b      	ldrb	r3, [r3, #10]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <refresh+0x134>)
 8000a84:	4413      	add	r3, r2
 8000a86:	2205      	movs	r2, #5
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff feb8 	bl	8000800 <lcd_string>
		break;
 8000a90:	e00e      	b.n	8000ab0 <refresh+0x11c>
	case 7:
		lcd_string(octave_menu[sound_config.octave2], 1, 5);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <refresh+0x12c>)
 8000a94:	7adb      	ldrb	r3, [r3, #11]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <refresh+0x134>)
 8000aa2:	4413      	add	r3, r2
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fea9 	bl	8000800 <lcd_string>
		break;
 8000aae:	bf00      	nop
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24004204 	.word	0x24004204
 8000ab8:	24004000 	.word	0x24004000
 8000abc:	08007b98 	.word	0x08007b98
 8000ac0:	240041b8 	.word	0x240041b8
 8000ac4:	240040a4 	.word	0x240040a4
 8000ac8:	24004080 	.word	0x24004080

08000acc <add_voice>:

// adds a voice to the DDS
static void add_voice(uint16_t frequency, uint16_t channel, uint16_t harmonic){
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	80bb      	strh	r3, [r7, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	807b      	strh	r3, [r7, #2]
	switch(channel){
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d002      	beq.n	8000aea <add_voice+0x1e>
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00e      	beq.n	8000b06 <add_voice+0x3a>
		break;
	case 2:
		increment2[harmonic] = frequency * 512 / 5;
		break;
	default:
		break;
 8000ae8:	e01b      	b.n	8000b22 <add_voice+0x56>
		increment1[harmonic] = frequency * 512 / 5;
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	025b      	lsls	r3, r3, #9
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <add_voice+0x64>)
 8000af0:	fb82 1203 	smull	r1, r2, r2, r3
 8000af4:	1052      	asrs	r2, r2, #1
 8000af6:	17db      	asrs	r3, r3, #31
 8000af8:	1ad2      	subs	r2, r2, r3
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	4611      	mov	r1, r2
 8000afe:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <add_voice+0x68>)
 8000b00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000b04:	e00d      	b.n	8000b22 <add_voice+0x56>
		increment2[harmonic] = frequency * 512 / 5;
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <add_voice+0x64>)
 8000b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b10:	1052      	asrs	r2, r2, #1
 8000b12:	17db      	asrs	r3, r3, #31
 8000b14:	1ad2      	subs	r2, r2, r3
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <add_voice+0x6c>)
 8000b1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000b20:	bf00      	nop
	}
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	66666667 	.word	0x66666667
 8000b34:	240041c4 	.word	0x240041c4
 8000b38:	240041d4 	.word	0x240041d4

08000b3c <remove_voice>:

// removes a voice from the DDS
static void remove_voice(uint16_t channel, uint16_t harmonic){
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	460a      	mov	r2, r1
 8000b46:	80fb      	strh	r3, [r7, #6]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	80bb      	strh	r3, [r7, #4]
	switch(channel){
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d002      	beq.n	8000b58 <remove_voice+0x1c>
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d00b      	beq.n	8000b6e <remove_voice+0x32>
	case 2:
		increment2[harmonic] = 0;
		counter2[harmonic] = 0;
		break;
	default:
		break;
 8000b56:	e015      	b.n	8000b84 <remove_voice+0x48>
		increment1[harmonic] = 0;
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <remove_voice+0x54>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		counter1[harmonic] = 0;
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <remove_voice+0x58>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000b6c:	e00a      	b.n	8000b84 <remove_voice+0x48>
		increment2[harmonic] = 0;
 8000b6e:	88bb      	ldrh	r3, [r7, #4]
 8000b70:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <remove_voice+0x5c>)
 8000b72:	2100      	movs	r1, #0
 8000b74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		counter2[harmonic] = 0;
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <remove_voice+0x60>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000b82:	bf00      	nop
	}
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	240041c4 	.word	0x240041c4
 8000b94:	240041e4 	.word	0x240041e4
 8000b98:	240041d4 	.word	0x240041d4
 8000b9c:	240041f4 	.word	0x240041f4

08000ba0 <customButtonInterrupt>:


//////////////////////////////////////////////////////////////////////// main functions

// button interrupt that resets the DDS
void customButtonInterrupt(void){
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
	// dds initial configuration
	sound_config.vol1 = 7;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <customButtonInterrupt+0x44>)
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	801a      	strh	r2, [r3, #0]
	sound_config.vol2 = 7;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <customButtonInterrupt+0x44>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	805a      	strh	r2, [r3, #2]
	sound_config.shape1 = sine;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <customButtonInterrupt+0x44>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	711a      	strb	r2, [r3, #4]
	sound_config.shape2 = sine;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <customButtonInterrupt+0x44>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	715a      	strb	r2, [r3, #5]
	sound_config.harmonics1 = 0;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <customButtonInterrupt+0x44>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	80da      	strh	r2, [r3, #6]
	sound_config.harmonics2 = 0;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <customButtonInterrupt+0x44>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	811a      	strh	r2, [r3, #8]
	sound_config.octave1 = range12;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <customButtonInterrupt+0x44>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	729a      	strb	r2, [r3, #10]
	sound_config.octave2 = range12;
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <customButtonInterrupt+0x44>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	72da      	strb	r2, [r3, #11]
	needs_update = 1;
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <customButtonInterrupt+0x48>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	801a      	strh	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	240041b8 	.word	0x240041b8
 8000be8:	24004208 	.word	0x24004208

08000bec <customTimerInterrupt>:

// timer interrupt running at sampling rate
void customTimerInterrupt(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
	volatile uint16_t out_l = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	80bb      	strh	r3, [r7, #4]
	volatile uint16_t out_r = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	807b      	strh	r3, [r7, #2]
	uint16_t harmonic = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(INT_OUT, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2120      	movs	r1, #32
 8000c02:	48a5      	ldr	r0, [pc, #660]	; (8000e98 <customTimerInterrupt+0x2ac>)
 8000c04:	f003 f8fa 	bl	8003dfc <HAL_GPIO_WritePin>

	// left channel
	for(harmonic = 0; harmonic <= sound_config.harmonics1; harmonic++){
 8000c08:	2300      	movs	r3, #0
 8000c0a:	80fb      	strh	r3, [r7, #6]
 8000c0c:	e09e      	b.n	8000d4c <customTimerInterrupt+0x160>
		counter1[harmonic] += increment1[harmonic];
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	4aa2      	ldr	r2, [pc, #648]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000c12:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4aa1      	ldr	r2, [pc, #644]	; (8000ea0 <customTimerInterrupt+0x2b4>)
 8000c1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	440a      	add	r2, r1
 8000c22:	499e      	ldr	r1, [pc, #632]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(counter1[harmonic] >= bigmax)
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	4a9c      	ldr	r2, [pc, #624]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000c2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c30:	4b9c      	ldr	r3, [pc, #624]	; (8000ea4 <customTimerInterrupt+0x2b8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d30a      	bcc.n	8000c4e <customTimerInterrupt+0x62>
			counter1[harmonic] -= bigmax;
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4a98      	ldr	r2, [pc, #608]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000c3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c40:	4b98      	ldr	r3, [pc, #608]	; (8000ea4 <customTimerInterrupt+0x2b8>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	1a8a      	subs	r2, r1, r2
 8000c48:	4994      	ldr	r1, [pc, #592]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(sound_config.shape1){
 8000c4e:	4b96      	ldr	r3, [pc, #600]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000c50:	791b      	ldrb	r3, [r3, #4]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d876      	bhi.n	8000d44 <customTimerInterrupt+0x158>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <customTimerInterrupt+0x70>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c6d 	.word	0x08000c6d
 8000c60:	08000ca3 	.word	0x08000ca3
 8000c64:	08000cd9 	.word	0x08000cd9
 8000c68:	08000d0f 	.word	0x08000d0f
		case sine:
			out_l += (uint16_t)((int16_t)LUTsine[counter1[harmonic] >> 10] * sound_config.vol1 / (16 * (harmonic + 1)));
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4a8b      	ldr	r2, [pc, #556]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	0a9b      	lsrs	r3, r3, #10
 8000c76:	4a8d      	ldr	r2, [pc, #564]	; (8000eac <customTimerInterrupt+0x2c0>)
 8000c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b89      	ldr	r3, [pc, #548]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	fb03 f202 	mul.w	r2, r3, r2
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	88bb      	ldrh	r3, [r7, #4]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	80bb      	strh	r3, [r7, #4]
			break;
 8000ca0:	e051      	b.n	8000d46 <customTimerInterrupt+0x15a>
		case square:
			out_l += (uint16_t)((int16_t)LUTsquare[counter1[harmonic] >> 10] * sound_config.vol1 / (16 * (harmonic + 1)));
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	4a7d      	ldr	r2, [pc, #500]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000caa:	0a9b      	lsrs	r3, r3, #10
 8000cac:	4a80      	ldr	r2, [pc, #512]	; (8000eb0 <customTimerInterrupt+0x2c4>)
 8000cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b7b      	ldr	r3, [pc, #492]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	fb03 f202 	mul.w	r2, r3, r2
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	80bb      	strh	r3, [r7, #4]
			break;
 8000cd6:	e036      	b.n	8000d46 <customTimerInterrupt+0x15a>
		case triangle:
			out_l += (uint16_t)((int16_t)LUTtri[counter1[harmonic] >> 10] * sound_config.vol1 / (16 * (harmonic + 1)));
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4a70      	ldr	r2, [pc, #448]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	0a9b      	lsrs	r3, r3, #10
 8000ce2:	4a74      	ldr	r2, [pc, #464]	; (8000eb4 <customTimerInterrupt+0x2c8>)
 8000ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b6e      	ldr	r3, [pc, #440]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	fb03 f202 	mul.w	r2, r3, r2
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4413      	add	r3, r2
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	80bb      	strh	r3, [r7, #4]
			break;
 8000d0c:	e01b      	b.n	8000d46 <customTimerInterrupt+0x15a>
		case sawtooth:
			out_l += (uint16_t)((int16_t)LUTsaw[counter1[harmonic] >> 10] * sound_config.vol1 / (16 * (harmonic + 1)));
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	4a62      	ldr	r2, [pc, #392]	; (8000e9c <customTimerInterrupt+0x2b0>)
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	0a9b      	lsrs	r3, r3, #10
 8000d18:	4a67      	ldr	r2, [pc, #412]	; (8000eb8 <customTimerInterrupt+0x2cc>)
 8000d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b60      	ldr	r3, [pc, #384]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	fb03 f202 	mul.w	r2, r3, r2
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	80bb      	strh	r3, [r7, #4]
			break;
 8000d42:	e000      	b.n	8000d46 <customTimerInterrupt+0x15a>
		default:
			break;
 8000d44:	bf00      	nop
	for(harmonic = 0; harmonic <= sound_config.harmonics1; harmonic++){
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	80fb      	strh	r3, [r7, #6]
 8000d4c:	4b56      	ldr	r3, [pc, #344]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000d4e:	88db      	ldrh	r3, [r3, #6]
 8000d50:	88fa      	ldrh	r2, [r7, #6]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	f67f af5b 	bls.w	8000c0e <customTimerInterrupt+0x22>
		}
	}

	// right channel
	for(harmonic = 0; harmonic <= sound_config.harmonics2; harmonic++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	80fb      	strh	r3, [r7, #6]
 8000d5c:	e0b6      	b.n	8000ecc <customTimerInterrupt+0x2e0>
		counter2[harmonic] += increment2[harmonic];
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4a56      	ldr	r2, [pc, #344]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000d62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	4a55      	ldr	r2, [pc, #340]	; (8000ec0 <customTimerInterrupt+0x2d4>)
 8000d6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	440a      	add	r2, r1
 8000d72:	4952      	ldr	r1, [pc, #328]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(counter2[harmonic] >= bigmax)
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	4a50      	ldr	r2, [pc, #320]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000d7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d80:	4b48      	ldr	r3, [pc, #288]	; (8000ea4 <customTimerInterrupt+0x2b8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d30a      	bcc.n	8000d9e <customTimerInterrupt+0x1b2>
			counter2[harmonic] -= bigmax;
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000d8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <customTimerInterrupt+0x2b8>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	1a8a      	subs	r2, r1, r2
 8000d98:	4948      	ldr	r1, [pc, #288]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(sound_config.shape2){
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000da0:	795b      	ldrb	r3, [r3, #5]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	f200 808e 	bhi.w	8000ec4 <customTimerInterrupt+0x2d8>
 8000da8:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <customTimerInterrupt+0x1c4>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000df7 	.word	0x08000df7
 8000db8:	08000e2d 	.word	0x08000e2d
 8000dbc:	08000e63 	.word	0x08000e63
		case sine:
			out_r += (uint16_t)((int16_t)LUTsine[counter2[harmonic] >> 10] * sound_config.vol2 / (16 * (harmonic + 1)));
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	4a3e      	ldr	r2, [pc, #248]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	0a9b      	lsrs	r3, r3, #10
 8000dca:	4a38      	ldr	r2, [pc, #224]	; (8000eac <customTimerInterrupt+0x2c0>)
 8000dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000dd8:	885b      	ldrh	r3, [r3, #2]
 8000dda:	fb03 f202 	mul.w	r2, r3, r2
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	3301      	adds	r3, #1
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	807b      	strh	r3, [r7, #2]
			break;
 8000df4:	e067      	b.n	8000ec6 <customTimerInterrupt+0x2da>
		case square:
			out_r += (uint16_t)((int16_t)LUTsquare[counter2[harmonic] >> 10] * sound_config.vol2 / (16 * (harmonic + 1)));
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	0a9b      	lsrs	r3, r3, #10
 8000e00:	4a2b      	ldr	r2, [pc, #172]	; (8000eb0 <customTimerInterrupt+0x2c4>)
 8000e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000e0e:	885b      	ldrh	r3, [r3, #2]
 8000e10:	fb03 f202 	mul.w	r2, r3, r2
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	3301      	adds	r3, #1
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	887b      	ldrh	r3, [r7, #2]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	807b      	strh	r3, [r7, #2]
			break;
 8000e2a:	e04c      	b.n	8000ec6 <customTimerInterrupt+0x2da>
		case triangle:
			out_r += (uint16_t)((int16_t)LUTtri[counter2[harmonic] >> 10] * sound_config.vol2 / (16 * (harmonic + 1)));
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	0a9b      	lsrs	r3, r3, #10
 8000e36:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <customTimerInterrupt+0x2c8>)
 8000e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000e44:	885b      	ldrh	r3, [r3, #2]
 8000e46:	fb03 f202 	mul.w	r2, r3, r2
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	887b      	ldrh	r3, [r7, #2]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	807b      	strh	r3, [r7, #2]
			break;
 8000e60:	e031      	b.n	8000ec6 <customTimerInterrupt+0x2da>
		case sawtooth:
			out_r += (uint16_t)((int16_t)LUTsaw[counter2[harmonic] >> 10] * sound_config.vol2 / (16 * (harmonic + 1)));
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <customTimerInterrupt+0x2d0>)
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	0a9b      	lsrs	r3, r3, #10
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <customTimerInterrupt+0x2cc>)
 8000e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <customTimerInterrupt+0x2bc>)
 8000e7a:	885b      	ldrh	r3, [r3, #2]
 8000e7c:	fb03 f202 	mul.w	r2, r3, r2
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	3301      	adds	r3, #1
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4413      	add	r3, r2
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	807b      	strh	r3, [r7, #2]
			break;
 8000e96:	e016      	b.n	8000ec6 <customTimerInterrupt+0x2da>
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	240041e4 	.word	0x240041e4
 8000ea0:	240041c4 	.word	0x240041c4
 8000ea4:	240040c8 	.word	0x240040c8
 8000ea8:	240041b8 	.word	0x240041b8
 8000eac:	24000180 	.word	0x24000180
 8000eb0:	24001120 	.word	0x24001120
 8000eb4:	24003060 	.word	0x24003060
 8000eb8:	240020c0 	.word	0x240020c0
 8000ebc:	240041f4 	.word	0x240041f4
 8000ec0:	240041d4 	.word	0x240041d4
		default:
			break;
 8000ec4:	bf00      	nop
	for(harmonic = 0; harmonic <= sound_config.harmonics2; harmonic++){
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	80fb      	strh	r3, [r7, #6]
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <customTimerInterrupt+0x310>)
 8000ece:	891b      	ldrh	r3, [r3, #8]
 8000ed0:	88fa      	ldrh	r2, [r7, #6]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	f67f af43 	bls.w	8000d5e <customTimerInterrupt+0x172>
		}
	}

	i2s(out_l, out_r);
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	887a      	ldrh	r2, [r7, #2]
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fcf8 	bl	80008d8 <i2s>
	HAL_GPIO_WritePin(INT_OUT, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2120      	movs	r1, #32
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <customTimerInterrupt+0x314>)
 8000eee:	f002 ff85 	bl	8003dfc <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	240041b8 	.word	0x240041b8
 8000f00:	58020400 	.word	0x58020400

08000f04 <customSetup>:

// function that runs once before entering the main loop
void customSetup(ADC_HandleTypeDef handler1, I2S_HandleTypeDef handler2){
 8000f04:	b084      	sub	sp, #16
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	f107 0c10 	add.w	ip, r7, #16
 8000f10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t aux = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	80fb      	strh	r3, [r7, #6]

	hadc1 = handler1;
 8000f18:	4b29      	ldr	r3, [pc, #164]	; (8000fc0 <customSetup+0xbc>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2264      	movs	r2, #100	; 0x64
 8000f22:	4619      	mov	r1, r3
 8000f24:	f006 fe16 	bl	8007b54 <memcpy>
	hi2s1 = handler2;
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <customSetup+0xc0>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f30:	2254      	movs	r2, #84	; 0x54
 8000f32:	4619      	mov	r1, r3
 8000f34:	f006 fe0e 	bl	8007b54 <memcpy>
	lcd_init();
 8000f38:	f7ff fbf2 	bl	8000720 <lcd_init>

	// dds initial configuration
	sound_config.vol1 = 7;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <customSetup+0xc4>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	801a      	strh	r2, [r3, #0]
	sound_config.vol2 = 7;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <customSetup+0xc4>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	805a      	strh	r2, [r3, #2]
	sound_config.shape1 = sine;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <customSetup+0xc4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	711a      	strb	r2, [r3, #4]
	sound_config.shape2 = sine;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <customSetup+0xc4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	715a      	strb	r2, [r3, #5]
	sound_config.harmonics1 = 0;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <customSetup+0xc4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	80da      	strh	r2, [r3, #6]
	sound_config.harmonics2 = 0;
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <customSetup+0xc4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	811a      	strh	r2, [r3, #8]
	sound_config.octave1 = range12;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <customSetup+0xc4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	729a      	strb	r2, [r3, #10]
	sound_config.octave2 = range12;
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <customSetup+0xc4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	72da      	strb	r2, [r3, #11]
	for(aux = 0; aux <= MAX_HARM; aux++){
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	80fb      	strh	r3, [r7, #6]
 8000f70:	e016      	b.n	8000fa0 <customSetup+0x9c>
		counter1[aux] = 0;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <customSetup+0xc8>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		counter2[aux] = 0;
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <customSetup+0xcc>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		increment1[aux] = 0;
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <customSetup+0xd0>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		increment2[aux] = 0;
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <customSetup+0xd4>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(aux = 0; aux <= MAX_HARM; aux++){
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	80fb      	strh	r3, [r7, #6]
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d9e5      	bls.n	8000f72 <customSetup+0x6e>
	}

	delay(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f7ff fc4f 	bl	800084a <delay>
	// UI first option
	refresh();
 8000fac:	f7ff fcf2 	bl	8000994 <refresh>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fba:	b004      	add	sp, #16
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	24004100 	.word	0x24004100
 8000fc4:	24004164 	.word	0x24004164
 8000fc8:	240041b8 	.word	0x240041b8
 8000fcc:	240041e4 	.word	0x240041e4
 8000fd0:	240041f4 	.word	0x240041f4
 8000fd4:	240041c4 	.word	0x240041c4
 8000fd8:	240041d4 	.word	0x240041d4

08000fdc <customLoop>:

// main loop
void customLoop(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
	// input variables
	enum _buttons button_pressed = button_check();
 8000fe2:	f7ff fc93 	bl	800090c <button_check>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	717b      	strb	r3, [r7, #5]
	uint16_t adc_value = adc();
 8000fea:	f7ff fc39 	bl	8000860 <adc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	807b      	strh	r3, [r7, #2]
	uint16_t aux = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	80fb      	strh	r3, [r7, #6]

	// detects UI input and adjust interface
	if((button_pressed != 0) || (needs_update == 1)){
 8000ff6:	797b      	ldrb	r3, [r7, #5]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d104      	bne.n	8001006 <customLoop+0x2a>
 8000ffc:	4ba0      	ldr	r3, [pc, #640]	; (8001280 <customLoop+0x2a4>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	f040 8214 	bne.w	800142e <customLoop+0x452>
		switch(menu_option){
 8001006:	4b9f      	ldr	r3, [pc, #636]	; (8001284 <customLoop+0x2a8>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b07      	cmp	r3, #7
 800100c:	f200 820a 	bhi.w	8001424 <customLoop+0x448>
 8001010:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <customLoop+0x3c>)
 8001012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001016:	bf00      	nop
 8001018:	08001039 	.word	0x08001039
 800101c:	080010ab 	.word	0x080010ab
 8001020:	08001129 	.word	0x08001129
 8001024:	080011a7 	.word	0x080011a7
 8001028:	08001223 	.word	0x08001223
 800102c:	080012b7 	.word	0x080012b7
 8001030:	08001339 	.word	0x08001339
 8001034:	080013b7 	.word	0x080013b7
		case 0:	// channel 1 volume
			switch(button_pressed){
 8001038:	797b      	ldrb	r3, [r7, #5]
 800103a:	3b01      	subs	r3, #1
 800103c:	2b03      	cmp	r3, #3
 800103e:	d82e      	bhi.n	800109e <customLoop+0xc2>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <customLoop+0x6c>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	0800109f 	.word	0x0800109f
 800104c:	08001059 	.word	0x08001059
 8001050:	08001067 	.word	0x08001067
 8001054:	08001089 	.word	0x08001089
			case up:
				break;
			case down:
				menu_option++;
 8001058:	4b8a      	ldr	r3, [pc, #552]	; (8001284 <customLoop+0x2a8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b88      	ldr	r3, [pc, #544]	; (8001284 <customLoop+0x2a8>)
 8001062:	701a      	strb	r2, [r3, #0]
				break;
 8001064:	e020      	b.n	80010a8 <customLoop+0xcc>
			case right:
				if(sound_config.vol1 < max[menu_option])
 8001066:	4b88      	ldr	r3, [pc, #544]	; (8001288 <customLoop+0x2ac>)
 8001068:	881a      	ldrh	r2, [r3, #0]
 800106a:	4b86      	ldr	r3, [pc, #536]	; (8001284 <customLoop+0x2a8>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4b86      	ldr	r3, [pc, #536]	; (800128c <customLoop+0x2b0>)
 8001072:	5c5b      	ldrb	r3, [r3, r1]
 8001074:	b29b      	uxth	r3, r3
 8001076:	429a      	cmp	r2, r3
 8001078:	d213      	bcs.n	80010a2 <customLoop+0xc6>
					sound_config.vol1++;
 800107a:	4b83      	ldr	r3, [pc, #524]	; (8001288 <customLoop+0x2ac>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b81      	ldr	r3, [pc, #516]	; (8001288 <customLoop+0x2ac>)
 8001084:	801a      	strh	r2, [r3, #0]
				break;
 8001086:	e00c      	b.n	80010a2 <customLoop+0xc6>
			case left:
				if(sound_config.vol1 > 0)
 8001088:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <customLoop+0x2ac>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00a      	beq.n	80010a6 <customLoop+0xca>
					sound_config.vol1--;
 8001090:	4b7d      	ldr	r3, [pc, #500]	; (8001288 <customLoop+0x2ac>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3b01      	subs	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <customLoop+0x2ac>)
 800109a:	801a      	strh	r2, [r3, #0]
				break;
 800109c:	e003      	b.n	80010a6 <customLoop+0xca>
			default:
				break;
 800109e:	bf00      	nop
 80010a0:	e1c0      	b.n	8001424 <customLoop+0x448>
				break;
 80010a2:	bf00      	nop
 80010a4:	e1be      	b.n	8001424 <customLoop+0x448>
				break;
 80010a6:	bf00      	nop
			}
			break;
 80010a8:	e1bc      	b.n	8001424 <customLoop+0x448>
		case 1:	// channel 2 volume
			switch(button_pressed){
 80010aa:	797b      	ldrb	r3, [r7, #5]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d834      	bhi.n	800111c <customLoop+0x140>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <customLoop+0xdc>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010d7 	.word	0x080010d7
 80010c0:	080010e5 	.word	0x080010e5
 80010c4:	08001107 	.word	0x08001107
			case up:
				menu_option--;
 80010c8:	4b6e      	ldr	r3, [pc, #440]	; (8001284 <customLoop+0x2a8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <customLoop+0x2a8>)
 80010d2:	701a      	strb	r2, [r3, #0]
				break;
 80010d4:	e027      	b.n	8001126 <customLoop+0x14a>
			case down:
				menu_option++;
 80010d6:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <customLoop+0x2a8>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b69      	ldr	r3, [pc, #420]	; (8001284 <customLoop+0x2a8>)
 80010e0:	701a      	strb	r2, [r3, #0]
				break;
 80010e2:	e020      	b.n	8001126 <customLoop+0x14a>
			case right:
				if(sound_config.vol2 < max[menu_option])
 80010e4:	4b68      	ldr	r3, [pc, #416]	; (8001288 <customLoop+0x2ac>)
 80010e6:	885a      	ldrh	r2, [r3, #2]
 80010e8:	4b66      	ldr	r3, [pc, #408]	; (8001284 <customLoop+0x2a8>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <customLoop+0x2b0>)
 80010f0:	5c5b      	ldrb	r3, [r3, r1]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d213      	bcs.n	8001120 <customLoop+0x144>
					sound_config.vol2++;
 80010f8:	4b63      	ldr	r3, [pc, #396]	; (8001288 <customLoop+0x2ac>)
 80010fa:	885b      	ldrh	r3, [r3, #2]
 80010fc:	3301      	adds	r3, #1
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b61      	ldr	r3, [pc, #388]	; (8001288 <customLoop+0x2ac>)
 8001102:	805a      	strh	r2, [r3, #2]
				break;
 8001104:	e00c      	b.n	8001120 <customLoop+0x144>
			case left:
				if(sound_config.vol2 > 0)
 8001106:	4b60      	ldr	r3, [pc, #384]	; (8001288 <customLoop+0x2ac>)
 8001108:	885b      	ldrh	r3, [r3, #2]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00a      	beq.n	8001124 <customLoop+0x148>
					sound_config.vol2--;
 800110e:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <customLoop+0x2ac>)
 8001110:	885b      	ldrh	r3, [r3, #2]
 8001112:	3b01      	subs	r3, #1
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <customLoop+0x2ac>)
 8001118:	805a      	strh	r2, [r3, #2]
				break;
 800111a:	e003      	b.n	8001124 <customLoop+0x148>
			default:
				break;
 800111c:	bf00      	nop
 800111e:	e181      	b.n	8001424 <customLoop+0x448>
				break;
 8001120:	bf00      	nop
 8001122:	e17f      	b.n	8001424 <customLoop+0x448>
				break;
 8001124:	bf00      	nop
			}
			break;
 8001126:	e17d      	b.n	8001424 <customLoop+0x448>
		case 2:	// channel 1 waveform
			switch(button_pressed){
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	3b01      	subs	r3, #1
 800112c:	2b03      	cmp	r3, #3
 800112e:	d834      	bhi.n	800119a <customLoop+0x1be>
 8001130:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <customLoop+0x15c>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001149 	.word	0x08001149
 800113c:	08001157 	.word	0x08001157
 8001140:	08001165 	.word	0x08001165
 8001144:	08001185 	.word	0x08001185
			case up:
				menu_option--;
 8001148:	4b4e      	ldr	r3, [pc, #312]	; (8001284 <customLoop+0x2a8>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <customLoop+0x2a8>)
 8001152:	701a      	strb	r2, [r3, #0]
				break;
 8001154:	e026      	b.n	80011a4 <customLoop+0x1c8>
			case down:
				menu_option++;
 8001156:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <customLoop+0x2a8>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <customLoop+0x2a8>)
 8001160:	701a      	strb	r2, [r3, #0]
				break;
 8001162:	e01f      	b.n	80011a4 <customLoop+0x1c8>
			case right:
				if(sound_config.shape1 < max[menu_option])
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <customLoop+0x2ac>)
 8001166:	791a      	ldrb	r2, [r3, #4]
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <customLoop+0x2a8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <customLoop+0x2b0>)
 8001170:	5c5b      	ldrb	r3, [r3, r1]
 8001172:	429a      	cmp	r2, r3
 8001174:	d213      	bcs.n	800119e <customLoop+0x1c2>
					sound_config.shape1++;
 8001176:	4b44      	ldr	r3, [pc, #272]	; (8001288 <customLoop+0x2ac>)
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	3301      	adds	r3, #1
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <customLoop+0x2ac>)
 8001180:	711a      	strb	r2, [r3, #4]
				break;
 8001182:	e00c      	b.n	800119e <customLoop+0x1c2>
			case left:
				if(sound_config.shape1 > 0)
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <customLoop+0x2ac>)
 8001186:	791b      	ldrb	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <customLoop+0x1c6>
					sound_config.shape1--;
 800118c:	4b3e      	ldr	r3, [pc, #248]	; (8001288 <customLoop+0x2ac>)
 800118e:	791b      	ldrb	r3, [r3, #4]
 8001190:	3b01      	subs	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <customLoop+0x2ac>)
 8001196:	711a      	strb	r2, [r3, #4]
				break;
 8001198:	e003      	b.n	80011a2 <customLoop+0x1c6>
			default:
				break;
 800119a:	bf00      	nop
 800119c:	e142      	b.n	8001424 <customLoop+0x448>
				break;
 800119e:	bf00      	nop
 80011a0:	e140      	b.n	8001424 <customLoop+0x448>
				break;
 80011a2:	bf00      	nop
			}
			break;
 80011a4:	e13e      	b.n	8001424 <customLoop+0x448>
		case 3:	// channel 2 waveform
			switch(button_pressed){
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d833      	bhi.n	8001216 <customLoop+0x23a>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <customLoop+0x1d8>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	08001201 	.word	0x08001201
			case up:
				menu_option--;
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <customLoop+0x2a8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <customLoop+0x2a8>)
 80011ce:	701a      	strb	r2, [r3, #0]
				break;
 80011d0:	e026      	b.n	8001220 <customLoop+0x244>
			case down:
				menu_option++;
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <customLoop+0x2a8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <customLoop+0x2a8>)
 80011dc:	701a      	strb	r2, [r3, #0]
				break;
 80011de:	e01f      	b.n	8001220 <customLoop+0x244>
			case right:
				if(sound_config.shape2 < max[menu_option])
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <customLoop+0x2ac>)
 80011e2:	795a      	ldrb	r2, [r3, #5]
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <customLoop+0x2a8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <customLoop+0x2b0>)
 80011ec:	5c5b      	ldrb	r3, [r3, r1]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d213      	bcs.n	800121a <customLoop+0x23e>
					sound_config.shape2++;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <customLoop+0x2ac>)
 80011f4:	795b      	ldrb	r3, [r3, #5]
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <customLoop+0x2ac>)
 80011fc:	715a      	strb	r2, [r3, #5]
				break;
 80011fe:	e00c      	b.n	800121a <customLoop+0x23e>
			case left:
				if(sound_config.shape2 > 0)
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <customLoop+0x2ac>)
 8001202:	795b      	ldrb	r3, [r3, #5]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00a      	beq.n	800121e <customLoop+0x242>
					sound_config.shape2--;
 8001208:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <customLoop+0x2ac>)
 800120a:	795b      	ldrb	r3, [r3, #5]
 800120c:	3b01      	subs	r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <customLoop+0x2ac>)
 8001212:	715a      	strb	r2, [r3, #5]
				break;
 8001214:	e003      	b.n	800121e <customLoop+0x242>
			default:
				break;
 8001216:	bf00      	nop
 8001218:	e104      	b.n	8001424 <customLoop+0x448>
				break;
 800121a:	bf00      	nop
 800121c:	e102      	b.n	8001424 <customLoop+0x448>
				break;
 800121e:	bf00      	nop
			}
			break;
 8001220:	e100      	b.n	8001424 <customLoop+0x448>
		case 4:	// channel 1 harmonics
			switch(button_pressed){
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	3b01      	subs	r3, #1
 8001226:	2b03      	cmp	r3, #3
 8001228:	d83d      	bhi.n	80012a6 <customLoop+0x2ca>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <customLoop+0x254>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	08001241 	.word	0x08001241
 8001234:	0800124f 	.word	0x0800124f
 8001238:	0800125d 	.word	0x0800125d
 800123c:	08001291 	.word	0x08001291
			case up:
				menu_option--;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <customLoop+0x2a8>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3b01      	subs	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <customLoop+0x2a8>)
 800124a:	701a      	strb	r2, [r3, #0]
				break;
 800124c:	e030      	b.n	80012b0 <customLoop+0x2d4>
			case down:
				menu_option++;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <customLoop+0x2a8>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <customLoop+0x2a8>)
 8001258:	701a      	strb	r2, [r3, #0]
				break;
 800125a:	e029      	b.n	80012b0 <customLoop+0x2d4>
			case right:
				if(sound_config.harmonics1 < max[menu_option])
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <customLoop+0x2ac>)
 800125e:	88da      	ldrh	r2, [r3, #6]
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <customLoop+0x2a8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <customLoop+0x2b0>)
 8001268:	5c5b      	ldrb	r3, [r3, r1]
 800126a:	b29b      	uxth	r3, r3
 800126c:	429a      	cmp	r2, r3
 800126e:	d21c      	bcs.n	80012aa <customLoop+0x2ce>
					sound_config.harmonics1++;
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <customLoop+0x2ac>)
 8001272:	88db      	ldrh	r3, [r3, #6]
 8001274:	3301      	adds	r3, #1
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <customLoop+0x2ac>)
 800127a:	80da      	strh	r2, [r3, #6]
				break;
 800127c:	e015      	b.n	80012aa <customLoop+0x2ce>
 800127e:	bf00      	nop
 8001280:	24004208 	.word	0x24004208
 8001284:	24004204 	.word	0x24004204
 8001288:	240041b8 	.word	0x240041b8
 800128c:	240040cc 	.word	0x240040cc
			case left:
				if(sound_config.harmonics1 > 0)
 8001290:	4b94      	ldr	r3, [pc, #592]	; (80014e4 <customLoop+0x508>)
 8001292:	88db      	ldrh	r3, [r3, #6]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <customLoop+0x2d2>
					sound_config.harmonics1--;
 8001298:	4b92      	ldr	r3, [pc, #584]	; (80014e4 <customLoop+0x508>)
 800129a:	88db      	ldrh	r3, [r3, #6]
 800129c:	3b01      	subs	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b90      	ldr	r3, [pc, #576]	; (80014e4 <customLoop+0x508>)
 80012a2:	80da      	strh	r2, [r3, #6]
				break;
 80012a4:	e003      	b.n	80012ae <customLoop+0x2d2>
			default:
				break;
 80012a6:	bf00      	nop
 80012a8:	e002      	b.n	80012b0 <customLoop+0x2d4>
				break;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <customLoop+0x2d4>
				break;
 80012ae:	bf00      	nop
			}
			refresh();
 80012b0:	f7ff fb70 	bl	8000994 <refresh>
			break;
 80012b4:	e0b6      	b.n	8001424 <customLoop+0x448>
		case 5:	// channel 2 harmonics
			switch(button_pressed){
 80012b6:	797b      	ldrb	r3, [r7, #5]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d834      	bhi.n	8001328 <customLoop+0x34c>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <customLoop+0x2e8>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012e3 	.word	0x080012e3
 80012cc:	080012f1 	.word	0x080012f1
 80012d0:	08001313 	.word	0x08001313
			case up:
				menu_option--;
 80012d4:	4b84      	ldr	r3, [pc, #528]	; (80014e8 <customLoop+0x50c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b82      	ldr	r3, [pc, #520]	; (80014e8 <customLoop+0x50c>)
 80012de:	701a      	strb	r2, [r3, #0]
				break;
 80012e0:	e027      	b.n	8001332 <customLoop+0x356>
			case down:
				menu_option++;
 80012e2:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <customLoop+0x50c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b7f      	ldr	r3, [pc, #508]	; (80014e8 <customLoop+0x50c>)
 80012ec:	701a      	strb	r2, [r3, #0]
				break;
 80012ee:	e020      	b.n	8001332 <customLoop+0x356>
			case right:
				if(sound_config.harmonics2 < max[menu_option])
 80012f0:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <customLoop+0x508>)
 80012f2:	891a      	ldrh	r2, [r3, #8]
 80012f4:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <customLoop+0x50c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4b7c      	ldr	r3, [pc, #496]	; (80014ec <customLoop+0x510>)
 80012fc:	5c5b      	ldrb	r3, [r3, r1]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	429a      	cmp	r2, r3
 8001302:	d213      	bcs.n	800132c <customLoop+0x350>
					sound_config.harmonics2++;
 8001304:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <customLoop+0x508>)
 8001306:	891b      	ldrh	r3, [r3, #8]
 8001308:	3301      	adds	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b75      	ldr	r3, [pc, #468]	; (80014e4 <customLoop+0x508>)
 800130e:	811a      	strh	r2, [r3, #8]
				break;
 8001310:	e00c      	b.n	800132c <customLoop+0x350>
			case left:
				if(sound_config.harmonics2 > 0)
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <customLoop+0x508>)
 8001314:	891b      	ldrh	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <customLoop+0x354>
					sound_config.harmonics2--;
 800131a:	4b72      	ldr	r3, [pc, #456]	; (80014e4 <customLoop+0x508>)
 800131c:	891b      	ldrh	r3, [r3, #8]
 800131e:	3b01      	subs	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <customLoop+0x508>)
 8001324:	811a      	strh	r2, [r3, #8]
				break;
 8001326:	e003      	b.n	8001330 <customLoop+0x354>
			default:
				break;
 8001328:	bf00      	nop
 800132a:	e002      	b.n	8001332 <customLoop+0x356>
				break;
 800132c:	bf00      	nop
 800132e:	e000      	b.n	8001332 <customLoop+0x356>
				break;
 8001330:	bf00      	nop
			}
			refresh();
 8001332:	f7ff fb2f 	bl	8000994 <refresh>
			break;
 8001336:	e075      	b.n	8001424 <customLoop+0x448>
		case 6:	// channel 1 octave
			switch(button_pressed){
 8001338:	797b      	ldrb	r3, [r7, #5]
 800133a:	3b01      	subs	r3, #1
 800133c:	2b03      	cmp	r3, #3
 800133e:	d834      	bhi.n	80013aa <customLoop+0x3ce>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <customLoop+0x36c>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001359 	.word	0x08001359
 800134c:	08001367 	.word	0x08001367
 8001350:	08001375 	.word	0x08001375
 8001354:	08001395 	.word	0x08001395
			case up:
				menu_option--;
 8001358:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <customLoop+0x50c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b61      	ldr	r3, [pc, #388]	; (80014e8 <customLoop+0x50c>)
 8001362:	701a      	strb	r2, [r3, #0]
				break;
 8001364:	e026      	b.n	80013b4 <customLoop+0x3d8>
			case down:
				menu_option++;
 8001366:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <customLoop+0x50c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <customLoop+0x50c>)
 8001370:	701a      	strb	r2, [r3, #0]
				break;
 8001372:	e01f      	b.n	80013b4 <customLoop+0x3d8>
			case right:
				if(sound_config.octave1 < max[menu_option])
 8001374:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <customLoop+0x508>)
 8001376:	7a9a      	ldrb	r2, [r3, #10]
 8001378:	4b5b      	ldr	r3, [pc, #364]	; (80014e8 <customLoop+0x50c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <customLoop+0x510>)
 8001380:	5c5b      	ldrb	r3, [r3, r1]
 8001382:	429a      	cmp	r2, r3
 8001384:	d213      	bcs.n	80013ae <customLoop+0x3d2>
					sound_config.octave1++;
 8001386:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <customLoop+0x508>)
 8001388:	7a9b      	ldrb	r3, [r3, #10]
 800138a:	3301      	adds	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <customLoop+0x508>)
 8001390:	729a      	strb	r2, [r3, #10]
				break;
 8001392:	e00c      	b.n	80013ae <customLoop+0x3d2>
			case left:
				if(sound_config.octave1 > 0)
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <customLoop+0x508>)
 8001396:	7a9b      	ldrb	r3, [r3, #10]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00a      	beq.n	80013b2 <customLoop+0x3d6>
					sound_config.octave1--;
 800139c:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <customLoop+0x508>)
 800139e:	7a9b      	ldrb	r3, [r3, #10]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <customLoop+0x508>)
 80013a6:	729a      	strb	r2, [r3, #10]
				break;
 80013a8:	e003      	b.n	80013b2 <customLoop+0x3d6>
			default:
				break;
 80013aa:	bf00      	nop
 80013ac:	e03a      	b.n	8001424 <customLoop+0x448>
				break;
 80013ae:	bf00      	nop
 80013b0:	e038      	b.n	8001424 <customLoop+0x448>
				break;
 80013b2:	bf00      	nop
			}
			break;
 80013b4:	e036      	b.n	8001424 <customLoop+0x448>
		case 7:	// channel 2 octave
			switch(button_pressed){
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d82c      	bhi.n	8001418 <customLoop+0x43c>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <customLoop+0x3e8>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	08001419 	.word	0x08001419
 80013cc:	080013e3 	.word	0x080013e3
 80013d0:	08001403 	.word	0x08001403
			case up:
				menu_option--;
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <customLoop+0x50c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <customLoop+0x50c>)
 80013de:	701a      	strb	r2, [r3, #0]
				break;
 80013e0:	e01f      	b.n	8001422 <customLoop+0x446>
			case down:
				break;
			case right:
				if(sound_config.octave2 < max[menu_option])
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <customLoop+0x508>)
 80013e4:	7ada      	ldrb	r2, [r3, #11]
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <customLoop+0x50c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <customLoop+0x510>)
 80013ee:	5c5b      	ldrb	r3, [r3, r1]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d213      	bcs.n	800141c <customLoop+0x440>
					sound_config.octave2++;
 80013f4:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <customLoop+0x508>)
 80013f6:	7adb      	ldrb	r3, [r3, #11]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <customLoop+0x508>)
 80013fe:	72da      	strb	r2, [r3, #11]
				break;
 8001400:	e00c      	b.n	800141c <customLoop+0x440>
			case left:
				if(sound_config.octave2 > 0)
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <customLoop+0x508>)
 8001404:	7adb      	ldrb	r3, [r3, #11]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00a      	beq.n	8001420 <customLoop+0x444>
					sound_config.octave2--;
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <customLoop+0x508>)
 800140c:	7adb      	ldrb	r3, [r3, #11]
 800140e:	3b01      	subs	r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <customLoop+0x508>)
 8001414:	72da      	strb	r2, [r3, #11]
				break;
 8001416:	e003      	b.n	8001420 <customLoop+0x444>
			default:
				break;
 8001418:	bf00      	nop
 800141a:	e002      	b.n	8001422 <customLoop+0x446>
				break;
 800141c:	bf00      	nop
 800141e:	e000      	b.n	8001422 <customLoop+0x446>
				break;
 8001420:	bf00      	nop
			}
			break;
 8001422:	bf00      	nop
		}
		refresh();
 8001424:	f7ff fab6 	bl	8000994 <refresh>
		needs_update = 0;
 8001428:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <customLoop+0x514>)
 800142a:	2200      	movs	r2, #0
 800142c:	801a      	strh	r2, [r3, #0]
	}

	// detect ribbon sensor input and activate voices
	if(adc_value != adc_old){
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <customLoop+0x518>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	429a      	cmp	r2, r3
 8001436:	f000 80cd 	beq.w	80015d4 <customLoop+0x5f8>
		adc_old = adc_value;
 800143a:	4a2e      	ldr	r2, [pc, #184]	; (80014f4 <customLoop+0x518>)
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	8013      	strh	r3, [r2, #0]
		if(adc_value == 0){ // ribbon sensor released
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d125      	bne.n	8001492 <customLoop+0x4b6>
			HAL_GPIO_WritePin(LED, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	2102      	movs	r1, #2
 800144a:	482b      	ldr	r0, [pc, #172]	; (80014f8 <customLoop+0x51c>)
 800144c:	f002 fcd6 	bl	8003dfc <HAL_GPIO_WritePin>
			for(aux = 0; aux <= sound_config.harmonics1; aux++)
 8001450:	2300      	movs	r3, #0
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	e007      	b.n	8001466 <customLoop+0x48a>
				remove_voice(1, aux);
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	4619      	mov	r1, r3
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fb6e 	bl	8000b3c <remove_voice>
			for(aux = 0; aux <= sound_config.harmonics1; aux++)
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	3301      	adds	r3, #1
 8001464:	80fb      	strh	r3, [r7, #6]
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <customLoop+0x508>)
 8001468:	88db      	ldrh	r3, [r3, #6]
 800146a:	88fa      	ldrh	r2, [r7, #6]
 800146c:	429a      	cmp	r2, r3
 800146e:	d9f2      	bls.n	8001456 <customLoop+0x47a>
			for(aux = 0; aux <= sound_config.harmonics2; aux++)
 8001470:	2300      	movs	r3, #0
 8001472:	80fb      	strh	r3, [r7, #6]
 8001474:	e007      	b.n	8001486 <customLoop+0x4aa>
				remove_voice(2, aux);
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4619      	mov	r1, r3
 800147a:	2002      	movs	r0, #2
 800147c:	f7ff fb5e 	bl	8000b3c <remove_voice>
			for(aux = 0; aux <= sound_config.harmonics2; aux++)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	3301      	adds	r3, #1
 8001484:	80fb      	strh	r3, [r7, #6]
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <customLoop+0x508>)
 8001488:	891b      	ldrh	r3, [r3, #8]
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	429a      	cmp	r2, r3
 800148e:	d9f2      	bls.n	8001476 <customLoop+0x49a>
 8001490:	e0a0      	b.n	80015d4 <customLoop+0x5f8>
		}
		else{ // needs to update the frequency
			HAL_GPIO_WritePin(LED, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2102      	movs	r1, #2
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <customLoop+0x51c>)
 8001498:	f002 fcb0 	bl	8003dfc <HAL_GPIO_WritePin>
			// will add voices according to the number of harmonics
			for(aux = 0; aux <= sound_config.harmonics1; aux++)
 800149c:	2300      	movs	r3, #0
 800149e:	80fb      	strh	r3, [r7, #6]
 80014a0:	e04c      	b.n	800153c <customLoop+0x560>
				if(adc_value > 12){
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	2b0c      	cmp	r3, #12
 80014a6:	d92b      	bls.n	8001500 <customLoop+0x524>
					if((sound_config.octave1 + aux) < 5) // keep harmonics from exceeding the max f
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <customLoop+0x508>)
 80014aa:	7a9b      	ldrb	r3, [r3, #10]
 80014ac:	461a      	mov	r2, r3
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	4413      	add	r3, r2
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	dc3f      	bgt.n	8001536 <customLoop+0x55a>
						add_voice(tone[sound_config.octave1 + 1 + aux][adc_value - 12], 1, aux);
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <customLoop+0x508>)
 80014b8:	7a9b      	ldrb	r3, [r3, #10]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	441a      	add	r2, r3
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	f1a3 010c 	sub.w	r1, r3, #12
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <customLoop+0x520>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	88fa      	ldrh	r2, [r7, #6]
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff faf5 	bl	8000acc <add_voice>
 80014e2:	e028      	b.n	8001536 <customLoop+0x55a>
 80014e4:	240041b8 	.word	0x240041b8
 80014e8:	24004204 	.word	0x24004204
 80014ec:	240040cc 	.word	0x240040cc
 80014f0:	24004208 	.word	0x24004208
 80014f4:	24004206 	.word	0x24004206
 80014f8:	58020000 	.word	0x58020000
 80014fc:	24000000 	.word	0x24000000
				}
				else
					if((sound_config.octave1 + aux) < 5) // keep harmonics from exceeding the max f
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <customLoop+0x608>)
 8001502:	7a9b      	ldrb	r3, [r3, #10]
 8001504:	461a      	mov	r2, r3
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	4413      	add	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	dc13      	bgt.n	8001536 <customLoop+0x55a>
						add_voice(tone[sound_config.octave1 + aux][adc_value], 1, aux);
 800150e:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <customLoop+0x608>)
 8001510:	7a9b      	ldrb	r3, [r3, #10]
 8001512:	461a      	mov	r2, r3
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	441a      	add	r2, r3
 8001518:	8879      	ldrh	r1, [r7, #2]
 800151a:	4833      	ldr	r0, [pc, #204]	; (80015e8 <customLoop+0x60c>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800152a:	b29b      	uxth	r3, r3
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	2101      	movs	r1, #1
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff facb 	bl	8000acc <add_voice>
			for(aux = 0; aux <= sound_config.harmonics1; aux++)
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3301      	adds	r3, #1
 800153a:	80fb      	strh	r3, [r7, #6]
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <customLoop+0x608>)
 800153e:	88db      	ldrh	r3, [r3, #6]
 8001540:	88fa      	ldrh	r2, [r7, #6]
 8001542:	429a      	cmp	r2, r3
 8001544:	d9ad      	bls.n	80014a2 <customLoop+0x4c6>
			for(aux = 0; aux <= sound_config.harmonics2; aux++)
 8001546:	2300      	movs	r3, #0
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	e03e      	b.n	80015ca <customLoop+0x5ee>
				if(adc_value > 12){
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d91d      	bls.n	800158e <customLoop+0x5b2>
					if((sound_config.octave2 + aux) < 5) // keep harmonics from exceeding the max f
 8001552:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <customLoop+0x608>)
 8001554:	7adb      	ldrb	r3, [r3, #11]
 8001556:	461a      	mov	r2, r3
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4413      	add	r3, r2
 800155c:	2b04      	cmp	r3, #4
 800155e:	dc31      	bgt.n	80015c4 <customLoop+0x5e8>
						add_voice(tone[sound_config.octave2 + 1 + aux][adc_value - 12], 2, aux);
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <customLoop+0x608>)
 8001562:	7adb      	ldrb	r3, [r3, #11]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	441a      	add	r2, r3
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	f1a3 010c 	sub.w	r1, r3, #12
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <customLoop+0x60c>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001580:	b29b      	uxth	r3, r3
 8001582:	88fa      	ldrh	r2, [r7, #6]
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff faa0 	bl	8000acc <add_voice>
 800158c:	e01a      	b.n	80015c4 <customLoop+0x5e8>
				}
				else
					if((sound_config.octave2 + aux) < 5) // keep harmonics from exceeding the max f
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <customLoop+0x608>)
 8001590:	7adb      	ldrb	r3, [r3, #11]
 8001592:	461a      	mov	r2, r3
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	4413      	add	r3, r2
 8001598:	2b04      	cmp	r3, #4
 800159a:	dc13      	bgt.n	80015c4 <customLoop+0x5e8>
						add_voice(tone[sound_config.octave2 + aux][adc_value], 2, aux);
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <customLoop+0x608>)
 800159e:	7adb      	ldrb	r3, [r3, #11]
 80015a0:	461a      	mov	r2, r3
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	441a      	add	r2, r3
 80015a6:	8879      	ldrh	r1, [r7, #2]
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <customLoop+0x60c>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	2102      	movs	r1, #2
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fa84 	bl	8000acc <add_voice>
			for(aux = 0; aux <= sound_config.harmonics2; aux++)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	3301      	adds	r3, #1
 80015c8:	80fb      	strh	r3, [r7, #6]
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <customLoop+0x608>)
 80015cc:	891b      	ldrh	r3, [r3, #8]
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d9bb      	bls.n	800154c <customLoop+0x570>
		}
	}

	// interface loop time interval
	delay(100);
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f7ff f938 	bl	800084a <delay>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	240041b8 	.word	0x240041b8
 80015e8:	24000000 	.word	0x24000000

080015ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001602:	4b5e      	ldr	r3, [pc, #376]	; (800177c <MX_GPIO_Init+0x190>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a5c      	ldr	r2, [pc, #368]	; (800177c <MX_GPIO_Init+0x190>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b5a      	ldr	r3, [pc, #360]	; (800177c <MX_GPIO_Init+0x190>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b56      	ldr	r3, [pc, #344]	; (800177c <MX_GPIO_Init+0x190>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a55      	ldr	r2, [pc, #340]	; (800177c <MX_GPIO_Init+0x190>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b52      	ldr	r3, [pc, #328]	; (800177c <MX_GPIO_Init+0x190>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b4f      	ldr	r3, [pc, #316]	; (800177c <MX_GPIO_Init+0x190>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a4d      	ldr	r2, [pc, #308]	; (800177c <MX_GPIO_Init+0x190>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b4b      	ldr	r3, [pc, #300]	; (800177c <MX_GPIO_Init+0x190>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <MX_GPIO_Init+0x190>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	4a46      	ldr	r2, [pc, #280]	; (800177c <MX_GPIO_Init+0x190>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166c:	4b43      	ldr	r3, [pc, #268]	; (800177c <MX_GPIO_Init+0x190>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <MX_GPIO_Init+0x190>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	4a3e      	ldr	r2, [pc, #248]	; (800177c <MX_GPIO_Init+0x190>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168a:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_GPIO_Init+0x190>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2102      	movs	r1, #2
 800169c:	4838      	ldr	r0, [pc, #224]	; (8001780 <MX_GPIO_Init+0x194>)
 800169e:	f002 fbad 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016a2:	2200      	movs	r2, #0
 80016a4:	21ff      	movs	r1, #255	; 0xff
 80016a6:	4837      	ldr	r0, [pc, #220]	; (8001784 <MX_GPIO_Init+0x198>)
 80016a8:	f002 fba8 	bl	8003dfc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2120      	movs	r1, #32
 80016b0:	4835      	ldr	r0, [pc, #212]	; (8001788 <MX_GPIO_Init+0x19c>)
 80016b2:	f002 fba3 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2103      	movs	r1, #3
 80016ba:	4834      	ldr	r0, [pc, #208]	; (800178c <MX_GPIO_Init+0x1a0>)
 80016bc:	f002 fb9e 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016c0:	233c      	movs	r3, #60	; 0x3c
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	482e      	ldr	r0, [pc, #184]	; (800178c <MX_GPIO_Init+0x1a0>)
 80016d4:	f002 f9ca 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016d8:	2302      	movs	r3, #2
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4824      	ldr	r0, [pc, #144]	; (8001780 <MX_GPIO_Init+0x194>)
 80016f0:	f002 f9bc 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016f4:	2320      	movs	r3, #32
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4821      	ldr	r0, [pc, #132]	; (8001790 <MX_GPIO_Init+0x1a4>)
 800170a:	f002 f9af 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800170e:	23ff      	movs	r3, #255	; 0xff
 8001710:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <MX_GPIO_Init+0x198>)
 8001726:	f002 f9a1 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800172a:	2320      	movs	r3, #32
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4811      	ldr	r0, [pc, #68]	; (8001788 <MX_GPIO_Init+0x19c>)
 8001742:	f002 f993 	bl	8003a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001746:	2303      	movs	r3, #3
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480b      	ldr	r0, [pc, #44]	; (800178c <MX_GPIO_Init+0x1a0>)
 800175e:	f002 f985 	bl	8003a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2017      	movs	r0, #23
 8001768:	f002 f94b 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800176c:	2017      	movs	r0, #23
 800176e:	f002 f962 	bl	8003a36 <HAL_NVIC_EnableIRQ>

}
 8001772:	bf00      	nop
 8001774:	3728      	adds	r7, #40	; 0x28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	58024400 	.word	0x58024400
 8001780:	58020000 	.word	0x58020000
 8001784:	58020c00 	.word	0x58020c00
 8001788:	58020400 	.word	0x58020400
 800178c:	58021000 	.word	0x58021000
 8001790:	58020800 	.word	0x58020800

08001794 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5)
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_EXTI_Callback+0x14>
		customButtonInterrupt();
 80017a4:	f7ff f9fc 	bl	8000ba0 <customButtonInterrupt>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <MX_I2S1_Init>:

I2S_HandleTypeDef hi2s1;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_I2S1_Init+0x5c>)
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <MX_I2S1_Init+0x60>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_I2S1_Init+0x5c>)
 80017bc:	2204      	movs	r2, #4
 80017be:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2S1_Init+0x5c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2S1_Init+0x5c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2S1_Init+0x5c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = 20000;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_I2S1_Init+0x5c>)
 80017d4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017d8:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_I2S1_Init+0x5c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  hi2s1.Init.FirstBit = I2S_FIRSTBIT_MSB;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_I2S1_Init+0x5c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  hi2s1.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_I2S1_Init+0x5c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  hi2s1.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_I2S1_Init+0x5c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s1.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_I2S1_Init+0x5c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_I2S1_Init+0x5c>)
 80017fa:	f002 fb33 	bl	8003e64 <HAL_I2S_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2S1_Init+0x58>
  {
    Error_Handler();
 8001804:	f000 f92e 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	24004270 	.word	0x24004270
 8001810:	40013000 	.word	0x40013000

08001814 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0b8      	sub	sp, #224	; 0xe0
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	22bc      	movs	r2, #188	; 0xbc
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f006 f99b 	bl	8007b70 <memset>
  if(i2sHandle->Instance==SPI1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <HAL_I2S_MspInit+0xbc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d141      	bne.n	80018c8 <HAL_I2S_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800184a:	2300      	movs	r3, #0
 800184c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fd04 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 800185e:	f000 f901 	bl	8001a64 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_I2S_MspInit+0xc0>)
 8001864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001868:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_I2S_MspInit+0xc0>)
 800186a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800186e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_I2S_MspInit+0xc0>)
 8001874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_I2S_MspInit+0xc0>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_I2S_MspInit+0xc0>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_I2S_MspInit+0xc0>)
 8001892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SDO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800189e:	23b0      	movs	r3, #176	; 0xb0
 80018a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018b6:	2305      	movs	r3, #5
 80018b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018c0:	4619      	mov	r1, r3
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <HAL_I2S_MspInit+0xc4>)
 80018c4:	f002 f8d2 	bl	8003a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018c8:	bf00      	nop
 80018ca:	37e0      	adds	r7, #224	; 0xe0
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40013000 	.word	0x40013000
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58020000 	.word	0x58020000

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b0ab      	sub	sp, #172	; 0xac
 80018e0:	af2a      	add	r7, sp, #168	; 0xa8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e2:	f000 fa1b 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e6:	f000 f827 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ea:	f7ff fe7f 	bl	80015ec <MX_GPIO_Init>
  MX_I2S1_Init();
 80018ee:	f7ff ff5f 	bl	80017b0 <MX_I2S1_Init>
  MX_ADC1_Init();
 80018f2:	f7fe fcf1 	bl	80002d8 <MX_ADC1_Init>
  MX_TIM16_Init();
 80018f6:	f000 f999 	bl	8001c2c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  customSetup(hadc1, hi2s1);
 80018fa:	4c0c      	ldr	r4, [pc, #48]	; (800192c <main+0x50>)
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <main+0x54>)
 80018fe:	ab15      	add	r3, sp, #84	; 0x54
 8001900:	4611      	mov	r1, r2
 8001902:	2254      	movs	r2, #84	; 0x54
 8001904:	4618      	mov	r0, r3
 8001906:	f006 f925 	bl	8007b54 <memcpy>
 800190a:	4668      	mov	r0, sp
 800190c:	f104 0310 	add.w	r3, r4, #16
 8001910:	2254      	movs	r2, #84	; 0x54
 8001912:	4619      	mov	r1, r3
 8001914:	f006 f91e 	bl	8007b54 <memcpy>
 8001918:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800191c:	f7ff faf2 	bl	8000f04 <customSetup>
  HAL_TIM_Base_Start_IT(&htim16);
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <main+0x58>)
 8001922:	f005 fe7b 	bl	800761c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	customLoop();
 8001926:	f7ff fb59 	bl	8000fdc <customLoop>
 800192a:	e7fc      	b.n	8001926 <main+0x4a>
 800192c:	2400420c 	.word	0x2400420c
 8001930:	24004270 	.word	0x24004270
 8001934:	240042c4 	.word	0x240042c4

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b09c      	sub	sp, #112	; 0x70
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	224c      	movs	r2, #76	; 0x4c
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f006 f912 	bl	8007b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2220      	movs	r2, #32
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f006 f90c 	bl	8007b70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001958:	2002      	movs	r0, #2
 800195a:	f002 fcbb 	bl	80042d4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <SystemClock_Config+0x100>)
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	4a34      	ldr	r2, [pc, #208]	; (8001a38 <SystemClock_Config+0x100>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <SystemClock_Config+0x100>)
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <SystemClock_Config+0x104>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001980:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <SystemClock_Config+0x104>)
 8001982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <SystemClock_Config+0x104>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001994:	bf00      	nop
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <SystemClock_Config+0x104>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d1f8      	bne.n	8001996 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <SystemClock_Config+0x108>)
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <SystemClock_Config+0x108>)
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b0:	2302      	movs	r3, #2
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b8:	2340      	movs	r3, #64	; 0x40
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019bc:	2302      	movs	r3, #2
 80019be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019c0:	2300      	movs	r3, #0
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019c4:	2304      	movs	r3, #4
 80019c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 11;
 80019c8:	230b      	movs	r3, #11
 80019ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019d8:	230c      	movs	r3, #12
 80019da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80019dc:	2302      	movs	r3, #2
 80019de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 328;
 80019e0:	f44f 73a4 	mov.w	r3, #328	; 0x148
 80019e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 fcac 	bl	8004348 <HAL_RCC_OscConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019f6:	f000 f835 	bl	8001a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fa:	233f      	movs	r3, #63	; 0x3f
 80019fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 f8be 	bl	8004ba0 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001a2a:	f000 f81b 	bl	8001a64 <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3770      	adds	r7, #112	; 0x70
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	58000400 	.word	0x58000400
 8001a3c:	58024800 	.word	0x58024800
 8001a40:	58024400 	.word	0x58024400

08001a44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0x14>
		customTimerInterrupt();
 8001a54:	f7ff f8ca 	bl	8000bec <customTimerInterrupt>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	240042c4 	.word	0x240042c4

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <Error_Handler+0x8>
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_MspInit+0x30>)
 8001a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a7c:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_MspInit+0x30>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_MspInit+0x30>)
 8001a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	58024400 	.word	0x58024400

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af0:	f000 f986 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001afc:	2020      	movs	r0, #32
 8001afe:	f002 f996 	bl	8003e2e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM16_IRQHandler+0x10>)
 8001b0e:	f005 fdfd 	bl	800770c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	240042c4 	.word	0x240042c4

08001b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <SystemInit+0xe4>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a36      	ldr	r2, [pc, #216]	; (8001c00 <SystemInit+0xe4>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <SystemInit+0xe8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d807      	bhi.n	8001b4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <SystemInit+0xe8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 030f 	bic.w	r3, r3, #15
 8001b44:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <SystemInit+0xe8>)
 8001b46:	f043 0307 	orr.w	r3, r3, #7
 8001b4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <SystemInit+0xec>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <SystemInit+0xec>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <SystemInit+0xec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <SystemInit+0xec>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4929      	ldr	r1, [pc, #164]	; (8001c08 <SystemInit+0xec>)
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <SystemInit+0xf0>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <SystemInit+0xe8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <SystemInit+0xe8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 030f 	bic.w	r3, r3, #15
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <SystemInit+0xe8>)
 8001b80:	f043 0307 	orr.w	r3, r3, #7
 8001b84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <SystemInit+0xec>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <SystemInit+0xec>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <SystemInit+0xec>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <SystemInit+0xec>)
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <SystemInit+0xf4>)
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <SystemInit+0xec>)
 8001ba0:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <SystemInit+0xf8>)
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <SystemInit+0xec>)
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <SystemInit+0xfc>)
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <SystemInit+0xec>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <SystemInit+0xec>)
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <SystemInit+0xfc>)
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <SystemInit+0xec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <SystemInit+0xec>)
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <SystemInit+0xfc>)
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <SystemInit+0xec>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <SystemInit+0xec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <SystemInit+0xec>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <SystemInit+0xec>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <SystemInit+0x100>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <SystemInit+0x104>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be6:	d202      	bcs.n	8001bee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <SystemInit+0x108>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <SystemInit+0x10c>)
 8001bf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bf4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	52002000 	.word	0x52002000
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c10:	02020200 	.word	0x02020200
 8001c14:	01ff0000 	.word	0x01ff0000
 8001c18:	01010280 	.word	0x01010280
 8001c1c:	5c001000 	.word	0x5c001000
 8001c20:	ffff0000 	.word	0xffff0000
 8001c24:	51008108 	.word	0x51008108
 8001c28:	52004000 	.word	0x52004000

08001c2c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <MX_TIM16_Init+0x48>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80 - 1;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c38:	224f      	movs	r2, #79	; 0x4f
 8001c3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 40 - 1;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c44:	2227      	movs	r2, #39	; 0x27
 8001c46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c5c:	f005 fc86 	bl	800756c <HAL_TIM_Base_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001c66:	f7ff fefd 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	240042c4 	.word	0x240042c4
 8001c74:	40014400 	.word	0x40014400

08001c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_TIM_Base_MspInit+0x48>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d116      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_TIM_Base_MspInit+0x4c>)
 8001c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_TIM_Base_MspInit+0x4c>)
 8001c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_TIM_Base_MspInit+0x4c>)
 8001c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2075      	movs	r0, #117	; 0x75
 8001cae:	f001 fea8 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001cb2:	2075      	movs	r0, #117	; 0x75
 8001cb4:	f001 febf 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40014400 	.word	0x40014400
 8001cc4:	58024400 	.word	0x58024400

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ccc:	f7ff ff26 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	; (8001d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	; (8001d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f005 ff09 	bl	8007b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff fdef 	bl	80018dc <main>
  bx  lr
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d08:	240040e4 	.word	0x240040e4
  ldr r2, =_sidata
 8001d0c:	08007bc4 	.word	0x08007bc4
  ldr r2, =_sbss
 8001d10:	240040e4 	.word	0x240040e4
  ldr r4, =_ebss
 8001d14:	24004314 	.word	0x24004314

08001d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC3_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f001 fe62 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d28:	f003 f8f0 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_Init+0x68>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	4913      	ldr	r1, [pc, #76]	; (8001d88 <HAL_Init+0x6c>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_Init+0x68>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_Init+0x6c>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_Init+0x70>)
 8001d5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_Init+0x74>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d66:	200f      	movs	r0, #15
 8001d68:	f000 f814 	bl	8001d94 <HAL_InitTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e002      	b.n	8001d7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d76:	f7ff fe7b 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	58024400 	.word	0x58024400
 8001d88:	08007bac 	.word	0x08007bac
 8001d8c:	240040d8 	.word	0x240040d8
 8001d90:	240040d4 	.word	0x240040d4

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_InitTick+0x60>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e021      	b.n	8001dec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_InitTick+0x64>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_InitTick+0x60>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fe47 	bl	8003a52 <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f001 fe11 	bl	8003a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <HAL_InitTick+0x68>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	240040e0 	.word	0x240040e0
 8001df8:	240040d4 	.word	0x240040d4
 8001dfc:	240040dc 	.word	0x240040dc

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	240040e0 	.word	0x240040e0
 8001e24:	24004310 	.word	0x24004310

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	24004310 	.word	0x24004310

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	240040e0 	.word	0x240040e0

08001e88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_GetREVID+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0c1b      	lsrs	r3, r3, #16
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	5c001000 	.word	0x5c001000

08001ea0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	609a      	str	r2, [r3, #8]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3360      	adds	r3, #96	; 0x60
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b087      	sub	sp, #28
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3360      	adds	r3, #96	; 0x60
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	601a      	str	r2, [r3, #0]
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b087      	sub	sp, #28
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3330      	adds	r3, #48	; 0x30
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	4413      	add	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	211f      	movs	r1, #31
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	401a      	ands	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	f003 011f 	and.w	r1, r3, #31
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800202e:	b480      	push	{r7}
 8002030:	b087      	sub	sp, #28
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3314      	adds	r3, #20
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	0e5b      	lsrs	r3, r3, #25
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0d1b      	lsrs	r3, r3, #20
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2107      	movs	r1, #7
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0d1b      	lsrs	r3, r3, #20
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	431a      	orrs	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002078:	bf00      	nop
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800209c:	43db      	mvns	r3, r3
 800209e:	401a      	ands	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0318 	and.w	r3, r3, #24
 80020a6:	4908      	ldr	r1, [pc, #32]	; (80020c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020a8:	40d9      	lsrs	r1, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	400b      	ands	r3, r1
 80020ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b2:	431a      	orrs	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	000fffff 	.word	0x000fffff

080020cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 031f 	and.w	r3, r3, #31
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6093      	str	r3, [r2, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	5fffffc0 	.word	0x5fffffc0

08002128 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800213c:	d101      	bne.n	8002142 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <LL_ADC_EnableInternalRegulator+0x24>)
 800215e:	4013      	ands	r3, r2
 8002160:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	6fffffc0 	.word	0x6fffffc0

08002178 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800218c:	d101      	bne.n	8002192 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <LL_ADC_Enable+0x24>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	7fffffc0 	.word	0x7fffffc0

080021c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <LL_ADC_Disable+0x24>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	f043 0202 	orr.w	r2, r3, #2
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	7fffffc0 	.word	0x7fffffc0

080021f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <LL_ADC_IsEnabled+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_IsEnabled+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d101      	bne.n	800222e <LL_ADC_IsDisableOngoing+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_IsDisableOngoing+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <LL_ADC_REG_StartConversion+0x24>)
 800224a:	4013      	ands	r3, r2
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	7fffffc0 	.word	0x7fffffc0

08002264 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <LL_ADC_REG_StopConversion+0x24>)
 8002272:	4013      	ands	r3, r2
 8002274:	f043 0210 	orr.w	r2, r3, #16
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	7fffffc0 	.word	0x7fffffc0

0800228c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b04      	cmp	r3, #4
 800229e:	d101      	bne.n	80022a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <LL_ADC_INJ_StopConversion+0x24>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	7fffffc0 	.word	0x7fffffc0

080022dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e18e      	b.n	800263c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe f84b 	bl	80003c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff feef 	bl	8002128 <LL_ADC_IsDeepPowerDownEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fed5 	bl	8002104 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff0a 	bl	8002178 <LL_ADC_IsInternalRegulatorEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff feee 	bl	8002150 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002374:	4b9a      	ldr	r3, [pc, #616]	; (80025e0 <HAL_ADC_Init+0x2dc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	4a9a      	ldr	r2, [pc, #616]	; (80025e4 <HAL_ADC_Init+0x2e0>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	3301      	adds	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002386:	e002      	b.n	800238e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	3b01      	subs	r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f9      	bne.n	8002388 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff feed 	bl	8002178 <LL_ADC_IsInternalRegulatorEnabled>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f043 0210 	orr.w	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff61 	bl	800228c <LL_ADC_REG_IsConversionOngoing>
 80023ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 8128 	bne.w	800262a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 8124 	bne.w	800262a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023ea:	f043 0202 	orr.w	r2, r3, #2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fefa 	bl	80021f0 <LL_ADC_IsEnabled>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d136      	bne.n	8002470 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a78      	ldr	r2, [pc, #480]	; (80025e8 <HAL_ADC_Init+0x2e4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_ADC_Init+0x112>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a76      	ldr	r2, [pc, #472]	; (80025ec <HAL_ADC_Init+0x2e8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10e      	bne.n	8002434 <HAL_ADC_Init+0x130>
 8002416:	4874      	ldr	r0, [pc, #464]	; (80025e8 <HAL_ADC_Init+0x2e4>)
 8002418:	f7ff feea 	bl	80021f0 <LL_ADC_IsEnabled>
 800241c:	4604      	mov	r4, r0
 800241e:	4873      	ldr	r0, [pc, #460]	; (80025ec <HAL_ADC_Init+0x2e8>)
 8002420:	f7ff fee6 	bl	80021f0 <LL_ADC_IsEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	4323      	orrs	r3, r4
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e008      	b.n	8002446 <HAL_ADC_Init+0x142>
 8002434:	486e      	ldr	r0, [pc, #440]	; (80025f0 <HAL_ADC_Init+0x2ec>)
 8002436:	f7ff fedb 	bl	80021f0 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d012      	beq.n	8002470 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a66      	ldr	r2, [pc, #408]	; (80025e8 <HAL_ADC_Init+0x2e4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_ADC_Init+0x15a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a64      	ldr	r2, [pc, #400]	; (80025ec <HAL_ADC_Init+0x2e8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_ADC_Init+0x15e>
 800245e:	4a65      	ldr	r2, [pc, #404]	; (80025f4 <HAL_ADC_Init+0x2f0>)
 8002460:	e000      	b.n	8002464 <HAL_ADC_Init+0x160>
 8002462:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_ADC_Init+0x2f4>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f7ff fd18 	bl	8001ea0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002470:	f7ff fd0a 	bl	8001e88 <HAL_GetREVID>
 8002474:	4603      	mov	r3, r0
 8002476:	f241 0203 	movw	r2, #4099	; 0x1003
 800247a:	4293      	cmp	r3, r2
 800247c:	d914      	bls.n	80024a8 <HAL_ADC_Init+0x1a4>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b10      	cmp	r3, #16
 8002484:	d110      	bne.n	80024a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7d5b      	ldrb	r3, [r3, #21]
 800248a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002490:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002496:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7f1b      	ldrb	r3, [r3, #28]
 800249c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800249e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024a0:	f043 030c 	orr.w	r3, r3, #12
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	e00d      	b.n	80024c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7d5b      	ldrb	r3, [r3, #21]
 80024ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7f1b      	ldrb	r3, [r3, #28]
 80024be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7f1b      	ldrb	r3, [r3, #28]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	045b      	lsls	r3, r3, #17
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_ADC_Init+0x2f8>)
 80024fe:	4013      	ands	r3, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	430b      	orrs	r3, r1
 8002508:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff febc 	bl	800228c <LL_ADC_REG_IsConversionOngoing>
 8002514:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fede 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 8002520:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d14a      	bne.n	80025be <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d147      	bne.n	80025be <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	7d1b      	ldrb	r3, [r3, #20]
 8002532:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_ADC_Init+0x2fc>)
 8002544:	4013      	ands	r3, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	430b      	orrs	r3, r1
 800254e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002556:	2b01      	cmp	r3, #1
 8002558:	d11b      	bne.n	8002592 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_ADC_Init+0x300>)
 8002568:	4013      	ands	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800256e:	3a01      	subs	r2, #1
 8002570:	0411      	lsls	r1, r2, #16
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002576:	4311      	orrs	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002582:	430a      	orrs	r2, r1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	611a      	str	r2, [r3, #16]
 8002590:	e007      	b.n	80025a2 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 ff39 	bl	8003430 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d120      	bne.n	8002608 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f023 010f 	bic.w	r1, r3, #15
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	1e5a      	subs	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
 80025de:	e01b      	b.n	8002618 <HAL_ADC_Init+0x314>
 80025e0:	240040d4 	.word	0x240040d4
 80025e4:	053e2d63 	.word	0x053e2d63
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40022100 	.word	0x40022100
 80025f0:	58026000 	.word	0x58026000
 80025f4:	40022300 	.word	0x40022300
 80025f8:	58026300 	.word	0x58026300
 80025fc:	fff0c003 	.word	0xfff0c003
 8002600:	ffffbffc 	.word	0xffffbffc
 8002604:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 020f 	bic.w	r2, r2, #15
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
 8002628:	e007      	b.n	800263a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800263a:	7ffb      	ldrb	r3, [r7, #31]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3724      	adds	r7, #36	; 0x24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}

08002644 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <HAL_ADC_Start+0x180>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_ADC_Start+0x1c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5b      	ldr	r2, [pc, #364]	; (80027c8 <HAL_ADC_Start+0x184>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_ADC_Start+0x20>
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_ADC_Start+0x188>)
 8002662:	e000      	b.n	8002666 <HAL_ADC_Start+0x22>
 8002664:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_ADC_Start+0x18c>)
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fd30 	bl	80020cc <LL_ADC_GetMultimode>
 800266c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe0a 	bl	800228c <LL_ADC_REG_IsConversionOngoing>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 809a 	bne.w	80027b4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_Start+0x4a>
 800268a:	2302      	movs	r3, #2
 800268c:	e095      	b.n	80027ba <HAL_ADC_Start+0x176>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fde0 	bl	800325c <ADC_Enable>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8081 	bne.w	80027aa <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ac:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <HAL_ADC_Start+0x190>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a42      	ldr	r2, [pc, #264]	; (80027c8 <HAL_ADC_Start+0x184>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d002      	beq.n	80026c8 <HAL_ADC_Start+0x84>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	e000      	b.n	80026ca <HAL_ADC_Start+0x86>
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_ADC_Start+0x180>)
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d002      	beq.n	80026d8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f0:	d106      	bne.n	8002700 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	f023 0206 	bic.w	r2, r3, #6
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	659a      	str	r2, [r3, #88]	; 0x58
 80026fe:	e002      	b.n	8002706 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	221c      	movs	r2, #28
 800270c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <HAL_ADC_Start+0x184>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d002      	beq.n	8002726 <HAL_ADC_Start+0xe2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	e000      	b.n	8002728 <HAL_ADC_Start+0xe4>
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_ADC_Start+0x180>)
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	4293      	cmp	r3, r2
 800272e:	d008      	beq.n	8002742 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d002      	beq.n	8002742 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b09      	cmp	r3, #9
 8002740:	d114      	bne.n	800276c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002758:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fd69 	bl	800223c <LL_ADC_REG_StartConversion>
 800276a:	e025      	b.n	80027b8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_ADC_Start+0x184>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d002      	beq.n	8002788 <HAL_ADC_Start+0x144>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e000      	b.n	800278a <HAL_ADC_Start+0x146>
 8002788:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <HAL_ADC_Start+0x180>)
 800278a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00f      	beq.n	80027b8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
 80027a8:	e006      	b.n	80027b8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027b2:	e001      	b.n	80027b8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027b4:	2302      	movs	r3, #2
 80027b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022100 	.word	0x40022100
 80027cc:	40022300 	.word	0x40022300
 80027d0:	58026300 	.word	0x58026300
 80027d4:	fffff0fe 	.word	0xfffff0fe

080027d8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_Stop+0x16>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e021      	b.n	8002832 <HAL_ADC_Stop+0x5a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80027f6:	2103      	movs	r1, #3
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fc73 	bl	80030e4 <ADC_ConversionStop>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fdb1 	bl	8003370 <ADC_Disable>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <HAL_ADC_Stop+0x64>)
 800281e:	4013      	ands	r3, r2
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	ffffeefe 	.word	0xffffeefe

08002840 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a72      	ldr	r2, [pc, #456]	; (8002a18 <HAL_ADC_PollForConversion+0x1d8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_ADC_PollForConversion+0x1e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a70      	ldr	r2, [pc, #448]	; (8002a1c <HAL_ADC_PollForConversion+0x1dc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_ADC_PollForConversion+0x22>
 800285e:	4b70      	ldr	r3, [pc, #448]	; (8002a20 <HAL_ADC_PollForConversion+0x1e0>)
 8002860:	e000      	b.n	8002864 <HAL_ADC_PollForConversion+0x24>
 8002862:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <HAL_ADC_PollForConversion+0x1e4>)
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fc31 	bl	80020cc <LL_ADC_GetMultimode>
 800286a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d102      	bne.n	800287a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002874:	2308      	movs	r3, #8
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	e037      	b.n	80028ea <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b05      	cmp	r3, #5
 8002884:	d002      	beq.n	800288c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b09      	cmp	r3, #9
 800288a:	d111      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0b1      	b.n	8002a0e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028aa:	2304      	movs	r3, #4
 80028ac:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80028ae:	e01c      	b.n	80028ea <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_ADC_PollForConversion+0x1d8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <HAL_ADC_PollForConversion+0x84>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_ADC_PollForConversion+0x1dc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_PollForConversion+0x88>
 80028c4:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <HAL_ADC_PollForConversion+0x1e0>)
 80028c6:	e000      	b.n	80028ca <HAL_ADC_PollForConversion+0x8a>
 80028c8:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_ADC_PollForConversion+0x1e4>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fc0c 	bl	80020e8 <LL_ADC_GetMultiDMATransfer>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e093      	b.n	8002a0e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028e6:	2304      	movs	r3, #4
 80028e8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ea:	f7ff fa9d 	bl	8001e28 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028f0:	e021      	b.n	8002936 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d01d      	beq.n	8002936 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028fa:	f7ff fa95 	bl	8001e28 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <HAL_ADC_PollForConversion+0xd0>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d112      	bne.n	8002936 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002922:	f043 0204 	orr.w	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e06b      	b.n	8002a0e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0d6      	beq.n	80028f2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fb2b 	bl	8001fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01c      	beq.n	800299a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7d5b      	ldrb	r3, [r3, #21]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b08      	cmp	r3, #8
 8002974:	d111      	bne.n	800299a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_ADC_PollForConversion+0x1dc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d002      	beq.n	80029aa <HAL_ADC_PollForConversion+0x16a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	e000      	b.n	80029ac <HAL_ADC_PollForConversion+0x16c>
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_ADC_PollForConversion+0x1d8>)
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d008      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d002      	beq.n	80029c6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	d104      	bne.n	80029d0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e00c      	b.n	80029ea <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_ADC_PollForConversion+0x1dc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d002      	beq.n	80029e0 <HAL_ADC_PollForConversion+0x1a0>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e000      	b.n	80029e2 <HAL_ADC_PollForConversion+0x1a2>
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_ADC_PollForConversion+0x1d8>)
 80029e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d104      	bne.n	80029fa <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2208      	movs	r2, #8
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e008      	b.n	8002a0c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	220c      	movs	r2, #12
 8002a0a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40022100 	.word	0x40022100
 8002a20:	40022300 	.word	0x40022300
 8002a24:	58026300 	.word	0x58026300

08002a28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b0a1      	sub	sp, #132	; 0x84
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a9d      	ldr	r2, [pc, #628]	; (8002cd4 <HAL_ADC_ConfigChannel+0x290>)
 8002a5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x2a>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e321      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x66e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fc06 	bl	800228c <LL_ADC_REG_IsConversionOngoing>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 8306 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x62>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	e016      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x90>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e003      	b.n	8002aca <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ac4:	fab3 f383 	clz	r3, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	2201      	movs	r2, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	69d1      	ldr	r1, [r2, #28]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f7ff fa71 	bl	8001fd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fbc7 	bl	800228c <LL_ADC_REG_IsConversionOngoing>
 8002afe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fbe9 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 8002b0a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 80b3 	bne.w	8002c7a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 80af 	bne.w	8002c7a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f7ff fa80 	bl	800202e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_ADC_ConfigChannel+0x294>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x110>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	e01d      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x14c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10b      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x136>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	e00a      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x14c>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d027      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6919      	ldr	r1, [r3, #16]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba8:	f7ff f9ae 	bl	8001f08 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6919      	ldr	r1, [r3, #16]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	7e5b      	ldrb	r3, [r3, #25]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d102      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x17e>
 8002bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bc0:	e000      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x180>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f7ff f9d8 	bl	8001f7a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6919      	ldr	r1, [r3, #16]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	7e1b      	ldrb	r3, [r3, #24]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d102      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x19c>
 8002bda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bde:	e000      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x19e>
 8002be0:	2300      	movs	r3, #0
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff f9b0 	bl	8001f48 <LL_ADC_SetDataRightShift>
 8002be8:	e047      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	069b      	lsls	r3, r3, #26
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d107      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c0c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	069b      	lsls	r3, r3, #26
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d107      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c30:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	069b      	lsls	r3, r3, #26
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d107      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c54:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	069b      	lsls	r3, r3, #26
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d107      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c78:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fab6 	bl	80021f0 <LL_ADC_IsEnabled>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 820d 	bne.w	80030a6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f7ff f9f3 	bl	8002084 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <HAL_ADC_ConfigChannel+0x290>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	f040 8133 	bne.w	8002f10 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d110      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x298>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2b09      	cmp	r3, #9
 8002cc8:	bf94      	ite	ls
 8002cca:	2301      	movls	r3, #1
 8002ccc:	2300      	movhi	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	e01e      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x2cc>
 8002cd2:	bf00      	nop
 8002cd4:	47ff0000 	.word	0x47ff0000
 8002cd8:	5c001000 	.word	0x5c001000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2b09      	cmp	r3, #9
 8002d08:	bf94      	ite	ls
 8002d0a:	2301      	movls	r3, #1
 8002d0c:	2300      	movhi	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d079      	beq.n	8002e08 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x2ec>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	3301      	adds	r3, #1
 8002d28:	069b      	lsls	r3, r3, #26
 8002d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2e:	e015      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x318>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	069b      	lsls	r3, r3, #26
 8002d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x338>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	e017      	b.n	8002dac <HAL_ADC_ConfigChannel+0x368>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x38e>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	051b      	lsls	r3, r3, #20
 8002dd0:	e018      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3c0>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002dea:	2320      	movs	r3, #32
 8002dec:	e003      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e04:	430b      	orrs	r3, r1
 8002e06:	e07e      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x3e0>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	069b      	lsls	r3, r3, #26
 8002e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e22:	e015      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x40c>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	069b      	lsls	r3, r3, #26
 8002e4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x42c>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	3301      	adds	r3, #1
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	e017      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x45c>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	61bb      	str	r3, [r7, #24]
  return result;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	e003      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	ea42 0103 	orr.w	r1, r2, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x488>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3b1e      	subs	r3, #30
 8002ec4:	051b      	lsls	r3, r3, #20
 8002ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eca:	e01b      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x4c0>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
  return result;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e003      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 021f 	and.w	r2, r3, #31
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	3b1e      	subs	r3, #30
 8002efe:	051b      	lsls	r3, r3, #20
 8002f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f04:	430b      	orrs	r3, r1
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7ff f88f 	bl	800202e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f280 80c6 	bge.w	80030a6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a67      	ldr	r2, [pc, #412]	; (80030bc <HAL_ADC_ConfigChannel+0x678>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d004      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x4ea>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a65      	ldr	r2, [pc, #404]	; (80030c0 <HAL_ADC_ConfigChannel+0x67c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x4ee>
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <HAL_ADC_ConfigChannel+0x680>)
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x4f0>
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <HAL_ADC_ConfigChannel+0x684>)
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe ffd9 	bl	8001eec <LL_ADC_GetCommonPathInternalCh>
 8002f3a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a5e      	ldr	r2, [pc, #376]	; (80030bc <HAL_ADC_ConfigChannel+0x678>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x50c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <HAL_ADC_ConfigChannel+0x67c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10e      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x52a>
 8002f50:	485a      	ldr	r0, [pc, #360]	; (80030bc <HAL_ADC_ConfigChannel+0x678>)
 8002f52:	f7ff f94d 	bl	80021f0 <LL_ADC_IsEnabled>
 8002f56:	4604      	mov	r4, r0
 8002f58:	4859      	ldr	r0, [pc, #356]	; (80030c0 <HAL_ADC_ConfigChannel+0x67c>)
 8002f5a:	f7ff f949 	bl	80021f0 <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4323      	orrs	r3, r4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	e008      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x53c>
 8002f6e:	4857      	ldr	r0, [pc, #348]	; (80030cc <HAL_ADC_ConfigChannel+0x688>)
 8002f70:	f7ff f93e 	bl	80021f0 <LL_ADC_IsEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d07d      	beq.n	8003080 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a51      	ldr	r2, [pc, #324]	; (80030d0 <HAL_ADC_ConfigChannel+0x68c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d130      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x5ac>
 8002f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d12b      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a4b      	ldr	r2, [pc, #300]	; (80030cc <HAL_ADC_ConfigChannel+0x688>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	f040 8081 	bne.w	80030a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a44      	ldr	r2, [pc, #272]	; (80030bc <HAL_ADC_ConfigChannel+0x678>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_ADC_ConfigChannel+0x574>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a43      	ldr	r2, [pc, #268]	; (80030c0 <HAL_ADC_ConfigChannel+0x67c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x578>
 8002fb8:	4a42      	ldr	r2, [pc, #264]	; (80030c4 <HAL_ADC_ConfigChannel+0x680>)
 8002fba:	e000      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x57a>
 8002fbc:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <HAL_ADC_ConfigChannel+0x684>)
 8002fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f7fe ff7d 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fcc:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_ADC_ConfigChannel+0x690>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	099b      	lsrs	r3, r3, #6
 8002fd2:	4a41      	ldr	r2, [pc, #260]	; (80030d8 <HAL_ADC_ConfigChannel+0x694>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fe0:	e002      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f9      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fee:	e05a      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a39      	ldr	r2, [pc, #228]	; (80030dc <HAL_ADC_ConfigChannel+0x698>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11e      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x5f4>
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d119      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a30      	ldr	r2, [pc, #192]	; (80030cc <HAL_ADC_ConfigChannel+0x688>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d14b      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2a      	ldr	r2, [pc, #168]	; (80030bc <HAL_ADC_ConfigChannel+0x678>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x5de>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_ADC_ConfigChannel+0x67c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x5e2>
 8003022:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_ADC_ConfigChannel+0x680>)
 8003024:	e000      	b.n	8003028 <HAL_ADC_ConfigChannel+0x5e4>
 8003026:	4a28      	ldr	r2, [pc, #160]	; (80030c8 <HAL_ADC_ConfigChannel+0x684>)
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f7fe ff48 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003036:	e036      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_ADC_ConfigChannel+0x69c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d131      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d12c      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <HAL_ADC_ConfigChannel+0x688>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d127      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_ADC_ConfigChannel+0x678>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_ADC_ConfigChannel+0x626>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_ADC_ConfigChannel+0x67c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x62a>
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <HAL_ADC_ConfigChannel+0x680>)
 800306c:	e000      	b.n	8003070 <HAL_ADC_ConfigChannel+0x62c>
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_ADC_ConfigChannel+0x684>)
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7fe ff24 	bl	8001ec6 <LL_ADC_SetCommonPathInternalCh>
 800307e:	e012      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003092:	e008      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3784      	adds	r7, #132	; 0x84
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40022100 	.word	0x40022100
 80030c4:	40022300 	.word	0x40022300
 80030c8:	58026300 	.word	0x58026300
 80030cc:	58026000 	.word	0x58026000
 80030d0:	cb840000 	.word	0xcb840000
 80030d4:	240040d4 	.word	0x240040d4
 80030d8:	053e2d63 	.word	0x053e2d63
 80030dc:	c7520000 	.word	0xc7520000
 80030e0:	cfb80000 	.word	0xcfb80000

080030e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff f8c6 	bl	800228c <LL_ADC_REG_IsConversionOngoing>
 8003100:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f8e8 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 800310c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8098 	beq.w	800324c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02a      	beq.n	8003180 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7d5b      	ldrb	r3, [r3, #21]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d126      	bne.n	8003180 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7d1b      	ldrb	r3, [r3, #20]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d122      	bne.n	8003180 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800313a:	2301      	movs	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800313e:	e014      	b.n	800316a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4a45      	ldr	r2, [pc, #276]	; (8003258 <ADC_ConversionStop+0x174>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d90d      	bls.n	8003164 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	f043 0210 	orr.w	r2, r3, #16
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e074      	b.n	800324e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d1e3      	bne.n	8003140 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2240      	movs	r2, #64	; 0x40
 800317e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d014      	beq.n	80031b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f87e 	bl	800228c <LL_ADC_REG_IsConversionOngoing>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff f83b 	bl	8002216 <LL_ADC_IsDisableOngoing>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d104      	bne.n	80031b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f85a 	bl	8002264 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d014      	beq.n	80031e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f88e 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f823 	bl	8002216 <LL_ADC_IsDisableOngoing>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f86a 	bl	80022b4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d005      	beq.n	80031f2 <ADC_ConversionStop+0x10e>
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d105      	bne.n	80031f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031ec:	230c      	movs	r3, #12
 80031ee:	617b      	str	r3, [r7, #20]
        break;
 80031f0:	e005      	b.n	80031fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031f2:	2308      	movs	r3, #8
 80031f4:	617b      	str	r3, [r7, #20]
        break;
 80031f6:	e002      	b.n	80031fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031f8:	2304      	movs	r3, #4
 80031fa:	617b      	str	r3, [r7, #20]
        break;
 80031fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031fe:	f7fe fe13 	bl	8001e28 <HAL_GetTick>
 8003202:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003204:	e01b      	b.n	800323e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003206:	f7fe fe0f 	bl	8001e28 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b05      	cmp	r3, #5
 8003212:	d914      	bls.n	800323e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	f043 0210 	orr.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e007      	b.n	800324e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1dc      	bne.n	8003206 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	000cdbff 	.word	0x000cdbff

0800325c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe ffc1 	bl	80021f0 <LL_ADC_IsEnabled>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d16e      	bne.n	8003352 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <ADC_Enable+0x100>)
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	f043 0210 	orr.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e05a      	b.n	8003354 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe ff7c 	bl	80021a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032a8:	f7fe fdbe 	bl	8001e28 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <ADC_Enable+0x104>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d004      	beq.n	80032c2 <ADC_Enable+0x66>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a29      	ldr	r2, [pc, #164]	; (8003364 <ADC_Enable+0x108>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <ADC_Enable+0x6a>
 80032c2:	4b29      	ldr	r3, [pc, #164]	; (8003368 <ADC_Enable+0x10c>)
 80032c4:	e000      	b.n	80032c8 <ADC_Enable+0x6c>
 80032c6:	4b29      	ldr	r3, [pc, #164]	; (800336c <ADC_Enable+0x110>)
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe feff 	bl	80020cc <LL_ADC_GetMultimode>
 80032ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <ADC_Enable+0x108>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d002      	beq.n	80032e0 <ADC_Enable+0x84>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e000      	b.n	80032e2 <ADC_Enable+0x86>
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <ADC_Enable+0x104>)
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02c      	beq.n	8003344 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d130      	bne.n	8003352 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032f0:	e028      	b.n	8003344 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe ff7a 	bl	80021f0 <LL_ADC_IsEnabled>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe ff4a 	bl	80021a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800330c:	f7fe fd8c 	bl	8001e28 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d914      	bls.n	8003344 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d00d      	beq.n	8003344 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f043 0210 	orr.w	r2, r3, #16
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e007      	b.n	8003354 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d1cf      	bne.n	80032f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	8000003f 	.word	0x8000003f
 8003360:	40022000 	.word	0x40022000
 8003364:	40022100 	.word	0x40022100
 8003368:	40022300 	.word	0x40022300
 800336c:	58026300 	.word	0x58026300

08003370 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe ff4a 	bl	8002216 <LL_ADC_IsDisableOngoing>
 8003382:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe ff31 	bl	80021f0 <LL_ADC_IsEnabled>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d047      	beq.n	8003424 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d144      	bne.n	8003424 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030d 	and.w	r3, r3, #13
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10c      	bne.n	80033c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe ff0b 	bl	80021c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2203      	movs	r2, #3
 80033b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033ba:	f7fe fd35 	bl	8001e28 <HAL_GetTick>
 80033be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033c0:	e029      	b.n	8003416 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f043 0210 	orr.w	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e023      	b.n	8003426 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033de:	f7fe fd23 	bl	8001e28 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d914      	bls.n	8003416 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f043 0210 	orr.w	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e007      	b.n	8003426 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1dc      	bne.n	80033de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a79      	ldr	r2, [pc, #484]	; (8003624 <ADC_ConfigureBoostMode+0x1f4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <ADC_ConfigureBoostMode+0x1c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a78      	ldr	r2, [pc, #480]	; (8003628 <ADC_ConfigureBoostMode+0x1f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <ADC_ConfigureBoostMode+0x30>
 800344c:	4b77      	ldr	r3, [pc, #476]	; (800362c <ADC_ConfigureBoostMode+0x1fc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e008      	b.n	8003472 <ADC_ConfigureBoostMode+0x42>
 8003460:	4b73      	ldr	r3, [pc, #460]	; (8003630 <ADC_ConfigureBoostMode+0x200>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01c      	beq.n	80034b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003476:	f001 fec3 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 800347a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003484:	d010      	beq.n	80034a8 <ADC_ConfigureBoostMode+0x78>
 8003486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800348a:	d871      	bhi.n	8003570 <ADC_ConfigureBoostMode+0x140>
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d002      	beq.n	8003498 <ADC_ConfigureBoostMode+0x68>
 8003492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003496:	d16b      	bne.n	8003570 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	60fb      	str	r3, [r7, #12]
        break;
 80034a6:	e066      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	60fb      	str	r3, [r7, #12]
        break;
 80034ae:	e062      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80034b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80034b4:	f002 fe14 	bl	80060e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80034b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034c2:	d051      	beq.n	8003568 <ADC_ConfigureBoostMode+0x138>
 80034c4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80034c8:	d854      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 80034ca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034ce:	d047      	beq.n	8003560 <ADC_ConfigureBoostMode+0x130>
 80034d0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80034d4:	d84e      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 80034d6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034da:	d03d      	beq.n	8003558 <ADC_ConfigureBoostMode+0x128>
 80034dc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80034e0:	d848      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 80034e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e6:	d033      	beq.n	8003550 <ADC_ConfigureBoostMode+0x120>
 80034e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ec:	d842      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 80034ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034f2:	d029      	beq.n	8003548 <ADC_ConfigureBoostMode+0x118>
 80034f4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80034f8:	d83c      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 80034fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80034fe:	d01a      	beq.n	8003536 <ADC_ConfigureBoostMode+0x106>
 8003500:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003504:	d836      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 8003506:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800350a:	d014      	beq.n	8003536 <ADC_ConfigureBoostMode+0x106>
 800350c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003510:	d830      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 8003512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003516:	d00e      	beq.n	8003536 <ADC_ConfigureBoostMode+0x106>
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d82a      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 800351e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003522:	d008      	beq.n	8003536 <ADC_ConfigureBoostMode+0x106>
 8003524:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003528:	d824      	bhi.n	8003574 <ADC_ConfigureBoostMode+0x144>
 800352a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800352e:	d002      	beq.n	8003536 <ADC_ConfigureBoostMode+0x106>
 8003530:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003534:	d11e      	bne.n	8003574 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	0c9b      	lsrs	r3, r3, #18
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	60fb      	str	r3, [r7, #12]
        break;
 8003546:	e016      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	60fb      	str	r3, [r7, #12]
        break;
 800354e:	e012      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	60fb      	str	r3, [r7, #12]
        break;
 8003556:	e00e      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	60fb      	str	r3, [r7, #12]
        break;
 800355e:	e00a      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	09db      	lsrs	r3, r3, #7
 8003564:	60fb      	str	r3, [r7, #12]
        break;
 8003566:	e006      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	60fb      	str	r3, [r7, #12]
        break;
 800356e:	e002      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
        break;
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003574:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003576:	f7fe fc87 	bl	8001e88 <HAL_GetREVID>
 800357a:	4603      	mov	r3, r0
 800357c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003580:	4293      	cmp	r3, r2
 8003582:	d815      	bhi.n	80035b0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <ADC_ConfigureBoostMode+0x204>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d908      	bls.n	800359e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800359c:	e03e      	b.n	800361c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ac:	609a      	str	r2, [r3, #8]
}
 80035ae:	e035      	b.n	800361c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <ADC_ConfigureBoostMode+0x208>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d808      	bhi.n	80035d0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035cc:	609a      	str	r2, [r3, #8]
}
 80035ce:	e025      	b.n	800361c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a1a      	ldr	r2, [pc, #104]	; (800363c <ADC_ConfigureBoostMode+0x20c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d80a      	bhi.n	80035ee <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	e016      	b.n	800361c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <ADC_ConfigureBoostMode+0x210>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d80a      	bhi.n	800360c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	e007      	b.n	800361c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40022000 	.word	0x40022000
 8003628:	40022100 	.word	0x40022100
 800362c:	40022300 	.word	0x40022300
 8003630:	58026300 	.word	0x58026300
 8003634:	01312d00 	.word	0x01312d00
 8003638:	005f5e10 	.word	0x005f5e10
 800363c:	00bebc20 	.word	0x00bebc20
 8003640:	017d7840 	.word	0x017d7840

08003644 <LL_ADC_IsEnabled>:
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <LL_ADC_IsEnabled+0x18>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <LL_ADC_IsEnabled+0x1a>
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_ADC_REG_IsConversionOngoing>:
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d101      	bne.n	8003682 <LL_ADC_REG_IsConversionOngoing+0x18>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b09f      	sub	sp, #124	; 0x7c
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e0be      	b.n	800382c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5c      	ldr	r2, [pc, #368]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d102      	bne.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036c8:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	e001      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10b      	bne.n	80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e09d      	b.n	800382c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff ffb9 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 80036f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ffb3 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d17f      	bne.n	800380a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800370a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800370c:	2b00      	cmp	r3, #0
 800370e:	d17c      	bne.n	800380a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a47      	ldr	r2, [pc, #284]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a46      	ldr	r2, [pc, #280]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003724:	4b45      	ldr	r3, [pc, #276]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003726:	e000      	b.n	800372a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800372a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d039      	beq.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	431a      	orrs	r2, r3
 8003742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003744:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a38      	ldr	r2, [pc, #224]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10e      	bne.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800375a:	4836      	ldr	r0, [pc, #216]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800375c:	f7ff ff72 	bl	8003644 <LL_ADC_IsEnabled>
 8003760:	4604      	mov	r4, r0
 8003762:	4835      	ldr	r0, [pc, #212]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003764:	f7ff ff6e 	bl	8003644 <LL_ADC_IsEnabled>
 8003768:	4603      	mov	r3, r0
 800376a:	4323      	orrs	r3, r4
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e008      	b.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003778:	4832      	ldr	r0, [pc, #200]	; (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800377a:	f7ff ff63 	bl	8003644 <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d047      	beq.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800378e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003794:	4013      	ands	r3, r2
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	6811      	ldr	r1, [r2, #0]
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037a6:	e03a      	b.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80037a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d10e      	bne.n	80037e6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80037c8:	481a      	ldr	r0, [pc, #104]	; (8003834 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037ca:	f7ff ff3b 	bl	8003644 <LL_ADC_IsEnabled>
 80037ce:	4604      	mov	r4, r0
 80037d0:	4819      	ldr	r0, [pc, #100]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037d2:	f7ff ff37 	bl	8003644 <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	4323      	orrs	r3, r4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	e008      	b.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80037e6:	4817      	ldr	r0, [pc, #92]	; (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037e8:	f7ff ff2c 	bl	8003644 <LL_ADC_IsEnabled>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003802:	4013      	ands	r3, r2
 8003804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003806:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003808:	e009      	b.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800381c:	e000      	b.n	8003820 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800381e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003828:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800382c:	4618      	mov	r0, r3
 800382e:	377c      	adds	r7, #124	; 0x7c
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	40022000 	.word	0x40022000
 8003838:	40022100 	.word	0x40022100
 800383c:	40022300 	.word	0x40022300
 8003840:	58026300 	.word	0x58026300
 8003844:	58026000 	.word	0x58026000
 8003848:	fffff0e0 	.word	0xfffff0e0

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <__NVIC_SetPriorityGrouping+0x40>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003876:	4313      	orrs	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <__NVIC_SetPriorityGrouping+0x40>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	60d3      	str	r3, [r2, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00
 8003890:	05fa0000 	.word	0x05fa0000

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	; (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	; (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	; (800393c <__NVIC_SetPriority+0x50>)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	; 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b8:	d301      	bcc.n	80039be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00f      	b.n	80039de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <SysTick_Config+0x40>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c6:	210f      	movs	r1, #15
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	f7ff ff8e 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <SysTick_Config+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <SysTick_Config+0x40>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010

080039ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff29 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a10:	f7ff ff40 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7ff ff90 	bl	8003940 <NVIC_EncodePriority>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff5f 	bl	80038ec <__NVIC_SetPriority>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff33 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffa4 	bl	80039a8 <SysTick_Config>
 8003a60:	4603      	mov	r3, r0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a7a:	4b89      	ldr	r3, [pc, #548]	; (8003ca0 <HAL_GPIO_Init+0x234>)
 8003a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a7e:	e194      	b.n	8003daa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8186 	beq.w	8003da4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d005      	beq.n	8003ab0 <HAL_GPIO_Init+0x44>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d130      	bne.n	8003b12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 0201 	and.w	r2, r3, #1
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d017      	beq.n	8003b4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	2203      	movs	r2, #3
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d123      	bne.n	8003ba2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	08da      	lsrs	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3208      	adds	r2, #8
 8003b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	220f      	movs	r2, #15
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	08da      	lsrs	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	69b9      	ldr	r1, [r7, #24]
 8003b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	2203      	movs	r2, #3
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0203 	and.w	r2, r3, #3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 80e0 	beq.w	8003da4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be4:	4b2f      	ldr	r3, [pc, #188]	; (8003ca4 <HAL_GPIO_Init+0x238>)
 8003be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bea:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_GPIO_Init+0x238>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_GPIO_Init+0x238>)
 8003bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c02:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <HAL_GPIO_Init+0x23c>)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	3302      	adds	r3, #2
 8003c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4013      	ands	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_GPIO_Init+0x240>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d052      	beq.n	8003cd4 <HAL_GPIO_Init+0x268>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <HAL_GPIO_Init+0x244>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d031      	beq.n	8003c9a <HAL_GPIO_Init+0x22e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <HAL_GPIO_Init+0x248>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d02b      	beq.n	8003c96 <HAL_GPIO_Init+0x22a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_GPIO_Init+0x24c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d025      	beq.n	8003c92 <HAL_GPIO_Init+0x226>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_GPIO_Init+0x250>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01f      	beq.n	8003c8e <HAL_GPIO_Init+0x222>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_GPIO_Init+0x254>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d019      	beq.n	8003c8a <HAL_GPIO_Init+0x21e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_GPIO_Init+0x258>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_GPIO_Init+0x21a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_GPIO_Init+0x25c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00d      	beq.n	8003c82 <HAL_GPIO_Init+0x216>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_GPIO_Init+0x260>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <HAL_GPIO_Init+0x212>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <HAL_GPIO_Init+0x264>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_GPIO_Init+0x20e>
 8003c76:	2309      	movs	r3, #9
 8003c78:	e02d      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	e02b      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c7e:	2308      	movs	r3, #8
 8003c80:	e029      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c82:	2307      	movs	r3, #7
 8003c84:	e027      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c86:	2306      	movs	r3, #6
 8003c88:	e025      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	e023      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c8e:	2304      	movs	r3, #4
 8003c90:	e021      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c92:	2303      	movs	r3, #3
 8003c94:	e01f      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e01d      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e01b      	b.n	8003cd6 <HAL_GPIO_Init+0x26a>
 8003c9e:	bf00      	nop
 8003ca0:	58000080 	.word	0x58000080
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	58000400 	.word	0x58000400
 8003cac:	58020000 	.word	0x58020000
 8003cb0:	58020400 	.word	0x58020400
 8003cb4:	58020800 	.word	0x58020800
 8003cb8:	58020c00 	.word	0x58020c00
 8003cbc:	58021000 	.word	0x58021000
 8003cc0:	58021400 	.word	0x58021400
 8003cc4:	58021800 	.word	0x58021800
 8003cc8:	58021c00 	.word	0x58021c00
 8003ccc:	58022000 	.word	0x58022000
 8003cd0:	58022400 	.word	0x58022400
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	f002 0203 	and.w	r2, r2, #3
 8003cdc:	0092      	lsls	r2, r2, #2
 8003cde:	4093      	lsls	r3, r2
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce6:	4938      	ldr	r1, [pc, #224]	; (8003dc8 <HAL_GPIO_Init+0x35c>)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	3302      	adds	r3, #2
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f47f ae63 	bne.w	8003a80 <HAL_GPIO_Init+0x14>
  }
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	3724      	adds	r7, #36	; 0x24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	58000400 	.word	0x58000400

08003dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	887b      	ldrh	r3, [r7, #2]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
 8003de8:	e001      	b.n	8003dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e18:	e003      	b.n	8003e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	041a      	lsls	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	619a      	str	r2, [r3, #24]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fd fc9d 	bl	8001794 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e10b      	b.n	800408e <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd fcc2 	bl	8001814 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d008      	beq.n	8003ed8 <HAL_I2S_Init+0x74>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b06      	cmp	r3, #6
 8003ecc:	d004      	beq.n	8003ed8 <HAL_I2S_Init+0x74>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b0a      	cmp	r3, #10
 8003ed4:	f040 8085 	bne.w	8003fe2 <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d058      	beq.n	8003f92 <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e001      	b.n	8003ef2 <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b30      	cmp	r3, #48	; 0x30
 8003ef8:	d003      	beq.n	8003f02 <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8003efe:	2bb0      	cmp	r3, #176	; 0xb0
 8003f00:	d102      	bne.n	8003f08 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8003f02:	2301      	movs	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e001      	b.n	8003f0c <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
        /* SPI1,SPI2 and SPI3 share the same source clock */
        i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
      }
#else
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8003f0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f10:	f002 f8e6 	bl	80060e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f14:	60b8      	str	r0, [r7, #8]
#endif  /* SPI_SPI6I2S_SUPPORT */

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f1e:	d113      	bne.n	8003f48 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f42:	3305      	adds	r3, #5
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e014      	b.n	8003f72 <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8003f48:	2220      	movs	r2, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	461a      	mov	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	3305      	adds	r3, #5
 8003f70:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4a48      	ldr	r2, [pc, #288]	; (8004098 <HAL_I2S_Init+0x234>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	08db      	lsrs	r3, r3, #3
 8003f7c:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	e003      	b.n	8003f9a <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8003f92:	2302      	movs	r3, #2
 8003f94:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <HAL_I2S_Init+0x142>
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d002      	beq.n	8003fac <HAL_I2S_Init+0x148>
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2bff      	cmp	r3, #255	; 0xff
 8003faa:	d907      	bls.n	8003fbc <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb0:	f043 0210 	orr.w	r2, r3, #16
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e068      	b.n	800408e <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <HAL_I2S_Init+0x238>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	0411      	lsls	r1, r2, #16
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0612      	lsls	r2, r2, #24
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fe8:	4b2d      	ldr	r3, [pc, #180]	; (80040a0 <HAL_I2S_Init+0x23c>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6851      	ldr	r1, [r2, #4]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6892      	ldr	r2, [r2, #8]
 8003ff4:	4311      	orrs	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68d2      	ldr	r2, [r2, #12]
 8003ffa:	4311      	orrs	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6992      	ldr	r2, [r2, #24]
 8004000:	4311      	orrs	r1, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6a12      	ldr	r2, [r2, #32]
 8004006:	4311      	orrs	r1, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800400c:	4311      	orrs	r1, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6912      	ldr	r2, [r2, #16]
 8004012:	430a      	orrs	r2, r1
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
             (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
              hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
              hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
              hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f640 72f8 	movw	r2, #4088	; 0xff8
 8004028:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004038:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d007      	beq.n	8004068 <HAL_I2S_Init+0x204>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b06      	cmp	r3, #6
 800405e:	d003      	beq.n	8004068 <HAL_I2S_Init+0x204>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b0a      	cmp	r3, #10
 8004066:	d10a      	bne.n	800407e <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	cccccccd 	.word	0xcccccccd
 800409c:	fe00ffff 	.word	0xfe00ffff
 80040a0:	fdff9040 	.word	0xfdff9040

080040a4 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hi2s->Instance->TXDR));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3320      	adds	r3, #32
 80040ba:	617b      	str	r3, [r7, #20]
#endif /* __GNUC__ */

  if ((pData == NULL) || (Size == 0UL))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_I2S_Transmit+0x24>
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_I2S_Transmit+0x28>
  {
    return  HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0c6      	b.n	800425a <HAL_I2S_Transmit+0x1b6>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <HAL_I2S_Transmit+0x38>
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
 80040da:	e0be      	b.n	800425a <HAL_I2S_Transmit+0x1b6>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_I2S_Transmit+0x48>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e0b6      	b.n	800425a <HAL_I2S_Transmit+0x1b6>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Set state and reset error code */
  hi2s->State       = HAL_I2S_STATE_BUSY_TX;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2203      	movs	r2, #3
 80040f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  hi2s->ErrorCode   = HAL_I2S_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->pTxBuffPtr  = pData;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->TxXferSize  = Size;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	88fa      	ldrh	r2, [r7, #6]
 800410c:	861a      	strh	r2, [r3, #48]	; 0x30
  hi2s->TxXferCount = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	88fa      	ldrh	r2, [r7, #6]
 8004112:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Initialize fields not used in handle to zero */
  hi2s->pRxBuffPtr  = NULL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	635a      	str	r2, [r3, #52]	; 0x34
  hi2s->RxXferSize  = (uint16_t) 0UL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	871a      	strh	r2, [r3, #56]	; 0x38
  hi2s->RxXferCount = (uint16_t) 0UL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d007      	beq.n	8004144 <HAL_I2S_Transmit+0xa0>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* Start the transfer */
  SET_BIT(hi2s->Instance->CR1, SPI_CR1_CSTART);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]


  /* Wait until TXP flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, Timeout) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	2102      	movs	r1, #2
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f881 	bl	8004262 <I2S_WaitFlagStateUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d06b      	beq.n	800423e <HAL_I2S_Transmit+0x19a>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	651a      	str	r2, [r3, #80]	; 0x50
    hi2s->State = HAL_I2S_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    __HAL_UNLOCK(hi2s);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e069      	b.n	800425a <HAL_I2S_Transmit+0x1b6>
  }

  while (hi2s->TxXferCount > 0UL)
  {
    if ((hi2s->Init.DataFormat == I2S_DATAFORMAT_24B) || (hi2s->Init.DataFormat == I2S_DATAFORMAT_32B))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418e:	d004      	beq.n	800419a <HAL_I2S_Transmit+0xf6>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004198:	d112      	bne.n	80041c0 <HAL_I2S_Transmit+0x11c>
    {
      /* Transmit data in 32 Bit mode */
      hi2s->Instance->TXDR = *((uint32_t *)hi2s->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	621a      	str	r2, [r3, #32]
      hi2s->pTxBuffPtr += 2;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	865a      	strh	r2, [r3, #50]	; 0x32
 80041be:	e010      	b.n	80041e2 <HAL_I2S_Transmit+0x13e>
    }
    else
    {
      /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
      *ptxdr_16bits = *((uint16_t *)hi2s->pTxBuffPtr);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	881a      	ldrh	r2, [r3, #0]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hi2s->Instance->TXDR) = *((uint16_t *)hi2s->pTxBuffPtr);
#endif /* __GNUC__ */

      hi2s->pTxBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	1c9a      	adds	r2, r3, #2
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2s->TxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    /* Wait until TXP flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXP, SET, Timeout) != HAL_OK)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	2102      	movs	r1, #2
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f83a 	bl	8004262 <I2S_WaitFlagStateUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00f      	beq.n	8004214 <HAL_I2S_Transmit+0x170>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	651a      	str	r2, [r3, #80]	; 0x50
      hi2s->State = HAL_I2S_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      __HAL_UNLOCK(hi2s);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e022      	b.n	800425a <HAL_I2S_Transmit+0x1b6>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b20      	cmp	r3, #32
 8004220:	d10d      	bne.n	800423e <HAL_I2S_Transmit+0x19a>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0220 	orr.w	r2, r2, #32
 8004230:	619a      	str	r2, [r3, #24]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	f043 0204 	orr.w	r2, r3, #4
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	651a      	str	r2, [r3, #80]	; 0x50
  while (hi2s->TxXferCount > 0UL)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d19e      	bne.n	8004186 <HAL_I2S_Transmit+0xe2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  __HAL_UNLOCK(hi2s);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004272:	f7fd fdd9 	bl	8001e28 <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004278:	e018      	b.n	80042ac <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d014      	beq.n	80042ac <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0UL))
 8004282:	f7fd fdd1 	bl	8001e28 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d902      	bls.n	8004298 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e00f      	b.n	80042cc <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d1d7      	bne.n	800427a <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_PWREx_ConfigSupply+0x70>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d00a      	beq.n	80042fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042e8:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_PWREx_ConfigSupply+0x70>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d001      	beq.n	80042fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e01f      	b.n	800433a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e01d      	b.n	800433a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042fe:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_PWREx_ConfigSupply+0x70>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f023 0207 	bic.w	r2, r3, #7
 8004306:	490f      	ldr	r1, [pc, #60]	; (8004344 <HAL_PWREx_ConfigSupply+0x70>)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4313      	orrs	r3, r2
 800430c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800430e:	f7fd fd8b 	bl	8001e28 <HAL_GetTick>
 8004312:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004314:	e009      	b.n	800432a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004316:	f7fd fd87 	bl	8001e28 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004324:	d901      	bls.n	800432a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e007      	b.n	800433a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800432a:	4b06      	ldr	r3, [pc, #24]	; (8004344 <HAL_PWREx_ConfigSupply+0x70>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d1ee      	bne.n	8004316 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	58024800 	.word	0x58024800

08004348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f000 bc1c 	b.w	8004b94 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8087 	beq.w	8004478 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436a:	4b9e      	ldr	r3, [pc, #632]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004374:	4b9b      	ldr	r3, [pc, #620]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b10      	cmp	r3, #16
 800437e:	d007      	beq.n	8004390 <HAL_RCC_OscConfig+0x48>
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	2b18      	cmp	r3, #24
 8004384:	d110      	bne.n	80043a8 <HAL_RCC_OscConfig+0x60>
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d10b      	bne.n	80043a8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	4b94      	ldr	r3, [pc, #592]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d06c      	beq.n	8004476 <HAL_RCC_OscConfig+0x12e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d168      	bne.n	8004476 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e3f5      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x78>
 80043b2:	4b8c      	ldr	r3, [pc, #560]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a8b      	ldr	r2, [pc, #556]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e02e      	b.n	800441e <HAL_RCC_OscConfig+0xd6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x9a>
 80043c8:	4b86      	ldr	r3, [pc, #536]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a85      	ldr	r2, [pc, #532]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b83      	ldr	r3, [pc, #524]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a82      	ldr	r2, [pc, #520]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	e01d      	b.n	800441e <HAL_RCC_OscConfig+0xd6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ea:	d10c      	bne.n	8004406 <HAL_RCC_OscConfig+0xbe>
 80043ec:	4b7d      	ldr	r3, [pc, #500]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7c      	ldr	r2, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a79      	ldr	r2, [pc, #484]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e00b      	b.n	800441e <HAL_RCC_OscConfig+0xd6>
 8004406:	4b77      	ldr	r3, [pc, #476]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a76      	ldr	r2, [pc, #472]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 800440c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	4b74      	ldr	r3, [pc, #464]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a73      	ldr	r2, [pc, #460]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d013      	beq.n	800444e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fd fcff 	bl	8001e28 <HAL_GetTick>
 800442a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800442e:	f7fd fcfb 	bl	8001e28 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b64      	cmp	r3, #100	; 0x64
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e3a9      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004440:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0xe6>
 800444c:	e014      	b.n	8004478 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fd fceb 	bl	8001e28 <HAL_GetTick>
 8004452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004456:	f7fd fce7 	bl	8001e28 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	; 0x64
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e395      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004468:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x10e>
 8004474:	e000      	b.n	8004478 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004476:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80ca 	beq.w	800461a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004486:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004490:	4b54      	ldr	r3, [pc, #336]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_RCC_OscConfig+0x164>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b18      	cmp	r3, #24
 80044a0:	d156      	bne.n	8004550 <HAL_RCC_OscConfig+0x208>
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d151      	bne.n	8004550 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	4b4d      	ldr	r3, [pc, #308]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_OscConfig+0x17c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e367      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044c4:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 0219 	bic.w	r2, r3, #25
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4944      	ldr	r1, [pc, #272]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044d6:	f7fd fca7 	bl	8001e28 <HAL_GetTick>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044de:	f7fd fca3 	bl	8001e28 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e351      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f0:	4b3c      	ldr	r3, [pc, #240]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fc:	f7fd fcc4 	bl	8001e88 <HAL_GetREVID>
 8004500:	4603      	mov	r3, r0
 8004502:	f241 0203 	movw	r2, #4099	; 0x1003
 8004506:	4293      	cmp	r3, r2
 8004508:	d817      	bhi.n	800453a <HAL_RCC_OscConfig+0x1f2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d108      	bne.n	8004524 <HAL_RCC_OscConfig+0x1dc>
 8004512:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800451a:	4a32      	ldr	r2, [pc, #200]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004522:	e07a      	b.n	800461a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004524:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	492c      	ldr	r1, [pc, #176]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004538:	e06f      	b.n	800461a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	061b      	lsls	r3, r3, #24
 8004548:	4926      	ldr	r1, [pc, #152]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454e:	e064      	b.n	800461a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d047      	beq.n	80045e8 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004558:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 0219 	bic.w	r2, r3, #25
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	491f      	ldr	r1, [pc, #124]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd fc5d 	bl	8001e28 <HAL_GetTick>
 800456e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7fd fc59 	bl	8001e28 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e307      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004584:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	f7fd fc7a 	bl	8001e88 <HAL_GetREVID>
 8004594:	4603      	mov	r3, r0
 8004596:	f241 0203 	movw	r2, #4099	; 0x1003
 800459a:	4293      	cmp	r3, r2
 800459c:	d817      	bhi.n	80045ce <HAL_RCC_OscConfig+0x286>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d108      	bne.n	80045b8 <HAL_RCC_OscConfig+0x270>
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045ae:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80045b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b4:	6053      	str	r3, [r2, #4]
 80045b6:	e030      	b.n	800461a <HAL_RCC_OscConfig+0x2d2>
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	031b      	lsls	r3, r3, #12
 80045c6:	4907      	ldr	r1, [pc, #28]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
 80045cc:	e025      	b.n	800461a <HAL_RCC_OscConfig+0x2d2>
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	4901      	ldr	r1, [pc, #4]	; (80045e4 <HAL_RCC_OscConfig+0x29c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
 80045e2:	e01a      	b.n	800461a <HAL_RCC_OscConfig+0x2d2>
 80045e4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e8:	4b9e      	ldr	r3, [pc, #632]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a9d      	ldr	r2, [pc, #628]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd fc18 	bl	8001e28 <HAL_GetTick>
 80045f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fd fc14 	bl	8001e28 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e2c2      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800460e:	4b95      	ldr	r3, [pc, #596]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80a9 	beq.w	800477a <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004628:	4b8e      	ldr	r3, [pc, #568]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004630:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004632:	4b8c      	ldr	r3, [pc, #560]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b08      	cmp	r3, #8
 800463c:	d007      	beq.n	800464e <HAL_RCC_OscConfig+0x306>
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b18      	cmp	r3, #24
 8004642:	d13a      	bne.n	80046ba <HAL_RCC_OscConfig+0x372>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d135      	bne.n	80046ba <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800464e:	4b85      	ldr	r3, [pc, #532]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x31e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e296      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004666:	f7fd fc0f 	bl	8001e88 <HAL_GetREVID>
 800466a:	4603      	mov	r3, r0
 800466c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004670:	4293      	cmp	r3, r2
 8004672:	d817      	bhi.n	80046a4 <HAL_RCC_OscConfig+0x35c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	2b20      	cmp	r3, #32
 800467a:	d108      	bne.n	800468e <HAL_RCC_OscConfig+0x346>
 800467c:	4b79      	ldr	r3, [pc, #484]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004684:	4a77      	ldr	r2, [pc, #476]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004686:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800468a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800468c:	e075      	b.n	800477a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800468e:	4b75      	ldr	r3, [pc, #468]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	069b      	lsls	r3, r3, #26
 800469c:	4971      	ldr	r1, [pc, #452]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046a2:	e06a      	b.n	800477a <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046a4:	4b6f      	ldr	r3, [pc, #444]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	496c      	ldr	r1, [pc, #432]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046b8:	e05f      	b.n	800477a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d042      	beq.n	8004748 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046c2:	4b68      	ldr	r3, [pc, #416]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a67      	ldr	r2, [pc, #412]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80046c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd fbab 	bl	8001e28 <HAL_GetTick>
 80046d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046d6:	f7fd fba7 	bl	8001e28 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e255      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046e8:	4b5e      	ldr	r3, [pc, #376]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046f4:	f7fd fbc8 	bl	8001e88 <HAL_GetREVID>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80046fe:	4293      	cmp	r3, r2
 8004700:	d817      	bhi.n	8004732 <HAL_RCC_OscConfig+0x3ea>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	2b20      	cmp	r3, #32
 8004708:	d108      	bne.n	800471c <HAL_RCC_OscConfig+0x3d4>
 800470a:	4b56      	ldr	r3, [pc, #344]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004712:	4a54      	ldr	r2, [pc, #336]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004718:	6053      	str	r3, [r2, #4]
 800471a:	e02e      	b.n	800477a <HAL_RCC_OscConfig+0x432>
 800471c:	4b51      	ldr	r3, [pc, #324]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	069b      	lsls	r3, r3, #26
 800472a:	494e      	ldr	r1, [pc, #312]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	e023      	b.n	800477a <HAL_RCC_OscConfig+0x432>
 8004732:	4b4c      	ldr	r3, [pc, #304]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	4948      	ldr	r1, [pc, #288]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	60cb      	str	r3, [r1, #12]
 8004746:	e018      	b.n	800477a <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004748:	4b46      	ldr	r3, [pc, #280]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a45      	ldr	r2, [pc, #276]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800474e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fd fb68 	bl	8001e28 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800475c:	f7fd fb64 	bl	8001e28 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e212      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d036      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d019      	beq.n	80047c2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478e:	4b35      	ldr	r3, [pc, #212]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004792:	4a34      	ldr	r2, [pc, #208]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fd fb45 	bl	8001e28 <HAL_GetTick>
 800479e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fd fb41 	bl	8001e28 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e1ef      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x45a>
 80047c0:	e018      	b.n	80047f4 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	4a27      	ldr	r2, [pc, #156]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fd fb2b 	bl	8001e28 <HAL_GetTick>
 80047d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d6:	f7fd fb27 	bl	8001e28 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1d5      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 80047ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d039      	beq.n	8004874 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d019      	beq.n	800483c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004808:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a15      	ldr	r2, [pc, #84]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800480e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004812:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004814:	f7fd fb08 	bl	8001e28 <HAL_GetTick>
 8004818:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800481c:	f7fd fb04 	bl	8001e28 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e1b2      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x4d4>
 800483a:	e01b      	b.n	8004874 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800483c:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <HAL_RCC_OscConfig+0x51c>)
 8004842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004846:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004848:	f7fd faee 	bl	8001e28 <HAL_GetTick>
 800484c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004850:	f7fd faea 	bl	8001e28 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d904      	bls.n	8004868 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e198      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
 8004862:	bf00      	nop
 8004864:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004868:	4ba3      	ldr	r3, [pc, #652]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ed      	bne.n	8004850 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8081 	beq.w	8004984 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004882:	4b9e      	ldr	r3, [pc, #632]	; (8004afc <HAL_RCC_OscConfig+0x7b4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a9d      	ldr	r2, [pc, #628]	; (8004afc <HAL_RCC_OscConfig+0x7b4>)
 8004888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800488e:	f7fd facb 	bl	8001e28 <HAL_GetTick>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004896:	f7fd fac7 	bl	8001e28 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b64      	cmp	r3, #100	; 0x64
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e175      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048a8:	4b94      	ldr	r3, [pc, #592]	; (8004afc <HAL_RCC_OscConfig+0x7b4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x582>
 80048bc:	4b8e      	ldr	r3, [pc, #568]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	4a8d      	ldr	r2, [pc, #564]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70
 80048c8:	e02d      	b.n	8004926 <HAL_RCC_OscConfig+0x5de>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x5a4>
 80048d2:	4b89      	ldr	r3, [pc, #548]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a88      	ldr	r2, [pc, #544]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	4b86      	ldr	r3, [pc, #536]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	4a85      	ldr	r2, [pc, #532]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048e4:	f023 0304 	bic.w	r3, r3, #4
 80048e8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ea:	e01c      	b.n	8004926 <HAL_RCC_OscConfig+0x5de>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d10c      	bne.n	800490e <HAL_RCC_OscConfig+0x5c6>
 80048f4:	4b80      	ldr	r3, [pc, #512]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	4a7f      	ldr	r2, [pc, #508]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004900:	4b7d      	ldr	r3, [pc, #500]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	4a7c      	ldr	r2, [pc, #496]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6713      	str	r3, [r2, #112]	; 0x70
 800490c:	e00b      	b.n	8004926 <HAL_RCC_OscConfig+0x5de>
 800490e:	4b7a      	ldr	r3, [pc, #488]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a79      	ldr	r2, [pc, #484]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
 800491a:	4b77      	ldr	r3, [pc, #476]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	4a76      	ldr	r2, [pc, #472]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004920:	f023 0304 	bic.w	r3, r3, #4
 8004924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d015      	beq.n	800495a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492e:	f7fd fa7b 	bl	8001e28 <HAL_GetTick>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fd fa77 	bl	8001e28 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e123      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800494c:	4b6a      	ldr	r3, [pc, #424]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0ee      	beq.n	8004936 <HAL_RCC_OscConfig+0x5ee>
 8004958:	e014      	b.n	8004984 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495a:	f7fd fa65 	bl	8001e28 <HAL_GetTick>
 800495e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004962:	f7fd fa61 	bl	8001e28 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e10d      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004978:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ee      	bne.n	8004962 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8102 	beq.w	8004b92 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800498e:	4b5a      	ldr	r3, [pc, #360]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004996:	2b18      	cmp	r3, #24
 8004998:	f000 80bd 	beq.w	8004b16 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	f040 8095 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b54      	ldr	r3, [pc, #336]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a53      	ldr	r2, [pc, #332]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80049ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd fa39 	bl	8001e28 <HAL_GetTick>
 80049b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fd fa35 	bl	8001e28 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e0e3      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049cc:	4b4a      	ldr	r3, [pc, #296]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f0      	bne.n	80049ba <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d8:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80049da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049dc:	4b48      	ldr	r3, [pc, #288]	; (8004b00 <HAL_RCC_OscConfig+0x7b8>)
 80049de:	4013      	ands	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049e8:	0112      	lsls	r2, r2, #4
 80049ea:	430a      	orrs	r2, r1
 80049ec:	4942      	ldr	r1, [pc, #264]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	628b      	str	r3, [r1, #40]	; 0x28
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f6:	3b01      	subs	r3, #1
 80049f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a00:	3b01      	subs	r3, #1
 8004a02:	025b      	lsls	r3, r3, #9
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a22:	4935      	ldr	r1, [pc, #212]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a28:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4a32      	ldr	r2, [pc, #200]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a34:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a38:	4b32      	ldr	r3, [pc, #200]	; (8004b04 <HAL_RCC_OscConfig+0x7bc>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a40:	00d2      	lsls	r2, r2, #3
 8004a42:	492d      	ldr	r1, [pc, #180]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a48:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f023 020c 	bic.w	r2, r3, #12
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	4928      	ldr	r1, [pc, #160]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a5a:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	f023 0202 	bic.w	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	4924      	ldr	r1, [pc, #144]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a6c:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a78:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a84:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fd f9be 	bl	8001e28 <HAL_GetTick>
 8004aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd f9ba 	bl	8001e28 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e068      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x768>
 8004ace:	e060      	b.n	8004b92 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <HAL_RCC_OscConfig+0x7b0>)
 8004ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd f9a4 	bl	8001e28 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ae2:	e011      	b.n	8004b08 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fd f9a0 	bl	8001e28 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d90a      	bls.n	8004b08 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e04e      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
 8004af6:	bf00      	nop
 8004af8:	58024400 	.word	0x58024400
 8004afc:	58024800 	.word	0x58024800
 8004b00:	fffffc0c 	.word	0xfffffc0c
 8004b04:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <HAL_RCC_OscConfig+0x854>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e7      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x79c>
 8004b14:	e03d      	b.n	8004b92 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b16:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <HAL_RCC_OscConfig+0x854>)
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b1c:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <HAL_RCC_OscConfig+0x854>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d031      	beq.n	8004b8e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0203 	and.w	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d12a      	bne.n	8004b8e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d122      	bne.n	8004b8e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d11a      	bne.n	8004b8e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	0a5b      	lsrs	r3, r3, #9
 8004b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d111      	bne.n	8004b8e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d108      	bne.n	8004b8e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	0e1b      	lsrs	r3, r3, #24
 8004b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3730      	adds	r7, #48	; 0x30
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	58024400 	.word	0x58024400

08004ba0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e19c      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b8a      	ldr	r3, [pc, #552]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d910      	bls.n	8004be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b87      	ldr	r3, [pc, #540]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f023 020f 	bic.w	r2, r3, #15
 8004bca:	4985      	ldr	r1, [pc, #532]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b83      	ldr	r3, [pc, #524]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e184      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d010      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d908      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c00:	4b78      	ldr	r3, [pc, #480]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	4975      	ldr	r1, [pc, #468]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d010      	beq.n	8004c40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	4b70      	ldr	r3, [pc, #448]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d908      	bls.n	8004c40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	496a      	ldr	r1, [pc, #424]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d010      	beq.n	8004c6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	4b64      	ldr	r3, [pc, #400]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d908      	bls.n	8004c6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c5c:	4b61      	ldr	r3, [pc, #388]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	495e      	ldr	r1, [pc, #376]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	4b59      	ldr	r3, [pc, #356]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d908      	bls.n	8004c9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4953      	ldr	r1, [pc, #332]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d010      	beq.n	8004cca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	4b4d      	ldr	r3, [pc, #308]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d908      	bls.n	8004cca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	4b4a      	ldr	r3, [pc, #296]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f023 020f 	bic.w	r2, r3, #15
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4947      	ldr	r1, [pc, #284]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d055      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cd6:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4940      	ldr	r1, [pc, #256]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cf0:	4b3c      	ldr	r3, [pc, #240]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d121      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0f6      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d08:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d115      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0ea      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0de      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d30:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0d6      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f023 0207 	bic.w	r2, r3, #7
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4925      	ldr	r1, [pc, #148]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fd f869 	bl	8001e28 <HAL_GetTick>
 8004d56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d5a:	f7fd f865 	bl	8001e28 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0be      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d70:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d1eb      	bne.n	8004d5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d010      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d208      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f023 020f 	bic.w	r2, r3, #15
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	490e      	ldr	r1, [pc, #56]	; (8004de4 <HAL_RCC_ClockConfig+0x244>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d214      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 020f 	bic.w	r2, r3, #15
 8004dc6:	4906      	ldr	r1, [pc, #24]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <HAL_RCC_ClockConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e086      	b.n	8004eee <HAL_RCC_ClockConfig+0x34e>
 8004de0:	52002000 	.word	0x52002000
 8004de4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d208      	bcs.n	8004e16 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e04:	4b3c      	ldr	r3, [pc, #240]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	4939      	ldr	r1, [pc, #228]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d208      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e32:	4b31      	ldr	r3, [pc, #196]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	492e      	ldr	r1, [pc, #184]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d208      	bcs.n	8004e72 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	4922      	ldr	r1, [pc, #136]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d208      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4917      	ldr	r1, [pc, #92]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ea0:	f000 f834 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	4912      	ldr	r1, [pc, #72]	; (8004efc <HAL_RCC_ClockConfig+0x35c>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <HAL_RCC_ClockConfig+0x358>)
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_RCC_ClockConfig+0x35c>)
 8004ec8:	5cd3      	ldrb	r3, [r2, r3]
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <HAL_RCC_ClockConfig+0x360>)
 8004ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <HAL_RCC_ClockConfig+0x364>)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <HAL_RCC_ClockConfig+0x368>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fc ff56 	bl	8001d94 <HAL_InitTick>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	08007bac 	.word	0x08007bac
 8004f00:	240040d8 	.word	0x240040d8
 8004f04:	240040d4 	.word	0x240040d4
 8004f08:	240040dc 	.word	0x240040dc

08004f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b089      	sub	sp, #36	; 0x24
 8004f10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f12:	4bb3      	ldr	r3, [pc, #716]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1a:	2b18      	cmp	r3, #24
 8004f1c:	f200 8155 	bhi.w	80051ca <HAL_RCC_GetSysClockFreq+0x2be>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f8d 	.word	0x08004f8d
 8004f2c:	080051cb 	.word	0x080051cb
 8004f30:	080051cb 	.word	0x080051cb
 8004f34:	080051cb 	.word	0x080051cb
 8004f38:	080051cb 	.word	0x080051cb
 8004f3c:	080051cb 	.word	0x080051cb
 8004f40:	080051cb 	.word	0x080051cb
 8004f44:	080051cb 	.word	0x080051cb
 8004f48:	08004fb3 	.word	0x08004fb3
 8004f4c:	080051cb 	.word	0x080051cb
 8004f50:	080051cb 	.word	0x080051cb
 8004f54:	080051cb 	.word	0x080051cb
 8004f58:	080051cb 	.word	0x080051cb
 8004f5c:	080051cb 	.word	0x080051cb
 8004f60:	080051cb 	.word	0x080051cb
 8004f64:	080051cb 	.word	0x080051cb
 8004f68:	08004fb9 	.word	0x08004fb9
 8004f6c:	080051cb 	.word	0x080051cb
 8004f70:	080051cb 	.word	0x080051cb
 8004f74:	080051cb 	.word	0x080051cb
 8004f78:	080051cb 	.word	0x080051cb
 8004f7c:	080051cb 	.word	0x080051cb
 8004f80:	080051cb 	.word	0x080051cb
 8004f84:	080051cb 	.word	0x080051cb
 8004f88:	08004fbf 	.word	0x08004fbf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f8c:	4b94      	ldr	r3, [pc, #592]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f98:	4b91      	ldr	r3, [pc, #580]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	08db      	lsrs	r3, r3, #3
 8004f9e:	f003 0303 	and.w	r3, r3, #3
 8004fa2:	4a90      	ldr	r2, [pc, #576]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004faa:	e111      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fac:	4b8d      	ldr	r3, [pc, #564]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fae:	61bb      	str	r3, [r7, #24]
    break;
 8004fb0:	e10e      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004fb2:	4b8d      	ldr	r3, [pc, #564]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fb4:	61bb      	str	r3, [r7, #24]
    break;
 8004fb6:	e10b      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004fb8:	4b8c      	ldr	r3, [pc, #560]	; (80051ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fba:	61bb      	str	r3, [r7, #24]
    break;
 8004fbc:	e108      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fbe:	4b88      	ldr	r3, [pc, #544]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fc8:	4b85      	ldr	r3, [pc, #532]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fd4:	4b82      	ldr	r3, [pc, #520]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004fde:	4b80      	ldr	r3, [pc, #512]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe2:	08db      	lsrs	r3, r3, #3
 8004fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80e1 	beq.w	80051c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b02      	cmp	r3, #2
 8005006:	f000 8083 	beq.w	8005110 <HAL_RCC_GetSysClockFreq+0x204>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b02      	cmp	r3, #2
 800500e:	f200 80a1 	bhi.w	8005154 <HAL_RCC_GetSysClockFreq+0x248>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_RCC_GetSysClockFreq+0x114>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d056      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800501e:	e099      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005020:	4b6f      	ldr	r3, [pc, #444]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02d      	beq.n	8005088 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800502c:	4b6c      	ldr	r3, [pc, #432]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	08db      	lsrs	r3, r3, #3
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	4a6b      	ldr	r2, [pc, #428]	; (80051e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
 800503c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b62      	ldr	r3, [pc, #392]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a02 	vldr	s12, [r7, #8]
 800506a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80051f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005086:	e087      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a58 	vldr	s13, [pc, #352]	; 80051f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b51      	ldr	r3, [pc, #324]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80051f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ca:	e065      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80051f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80051f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800510e:	e043      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80051fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b2f      	ldr	r3, [pc, #188]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a02 	vldr	s12, [r7, #8]
 8005136:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80051f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005152:	e021      	b.n	8005198 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80051f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b1e      	ldr	r3, [pc, #120]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a02 	vldr	s12, [r7, #8]
 800517a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80051f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005196:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005198:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	0a5b      	lsrs	r3, r3, #9
 800519e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a2:	3301      	adds	r3, #1
 80051a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	ee07 3a90 	vmov	s15, r3
 80051ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051bc:	ee17 3a90 	vmov	r3, s15
 80051c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80051c2:	e005      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61bb      	str	r3, [r7, #24]
    break;
 80051c8:	e002      	b.n	80051d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051cc:	61bb      	str	r3, [r7, #24]
    break;
 80051ce:	bf00      	nop
  }

  return sysclockfreq;
 80051d0:	69bb      	ldr	r3, [r7, #24]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3724      	adds	r7, #36	; 0x24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	58024400 	.word	0x58024400
 80051e4:	03d09000 	.word	0x03d09000
 80051e8:	003d0900 	.word	0x003d0900
 80051ec:	017d7840 	.word	0x017d7840
 80051f0:	46000000 	.word	0x46000000
 80051f4:	4c742400 	.word	0x4c742400
 80051f8:	4a742400 	.word	0x4a742400
 80051fc:	4bbebc20 	.word	0x4bbebc20

08005200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005206:	f7ff fe81 	bl	8004f0c <HAL_RCC_GetSysClockFreq>
 800520a:	4602      	mov	r2, r0
 800520c:	4b10      	ldr	r3, [pc, #64]	; (8005250 <HAL_RCC_GetHCLKFreq+0x50>)
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	490f      	ldr	r1, [pc, #60]	; (8005254 <HAL_RCC_GetHCLKFreq+0x54>)
 8005218:	5ccb      	ldrb	r3, [r1, r3]
 800521a:	f003 031f 	and.w	r3, r3, #31
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <HAL_RCC_GetHCLKFreq+0x50>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_RCC_GetHCLKFreq+0x54>)
 800522e:	5cd3      	ldrb	r3, [r2, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a07      	ldr	r2, [pc, #28]	; (8005258 <HAL_RCC_GetHCLKFreq+0x58>)
 800523c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800523e:	4a07      	ldr	r2, [pc, #28]	; (800525c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <HAL_RCC_GetHCLKFreq+0x58>)
 8005246:	681b      	ldr	r3, [r3, #0]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	58024400 	.word	0x58024400
 8005254:	08007bac 	.word	0x08007bac
 8005258:	240040d8 	.word	0x240040d8
 800525c:	240040d4 	.word	0x240040d4

08005260 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005268:	2300      	movs	r3, #0
 800526a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800526c:	2300      	movs	r3, #0
 800526e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d03f      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005280:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005284:	d02a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005286:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800528a:	d824      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800528c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005290:	d018      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005292:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005296:	d81e      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800529c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052a0:	d007      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052a2:	e018      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a4:	4bab      	ldr	r3, [pc, #684]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	4aaa      	ldr	r2, [pc, #680]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052b0:	e015      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	2102      	movs	r1, #2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fff3 	bl	80072a4 <RCCEx_PLL2_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052c2:	e00c      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3324      	adds	r3, #36	; 0x24
 80052c8:	2102      	movs	r1, #2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f002 f89c 	bl	8007408 <RCCEx_PLL3_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
      break;
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052e4:	4b9b      	ldr	r3, [pc, #620]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f0:	4998      	ldr	r1, [pc, #608]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	650b      	str	r3, [r1, #80]	; 0x50
 80052f6:	e001      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d03d      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	2b04      	cmp	r3, #4
 800530e:	d826      	bhi.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800532d 	.word	0x0800532d
 800531c:	0800533b 	.word	0x0800533b
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005365 	.word	0x08005365
 8005328:	08005365 	.word	0x08005365
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800532c:	4b89      	ldr	r3, [pc, #548]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	4a88      	ldr	r2, [pc, #544]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005336:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005338:	e015      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	2100      	movs	r1, #0
 8005340:	4618      	mov	r0, r3
 8005342:	f001 ffaf 	bl	80072a4 <RCCEx_PLL2_Config>
 8005346:	4603      	mov	r3, r0
 8005348:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800534a:	e00c      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3324      	adds	r3, #36	; 0x24
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f002 f858 	bl	8007408 <RCCEx_PLL3_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
      break;
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800536c:	4b79      	ldr	r3, [pc, #484]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	f023 0207 	bic.w	r2, r3, #7
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	4976      	ldr	r1, [pc, #472]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800537a:	4313      	orrs	r3, r2
 800537c:	650b      	str	r3, [r1, #80]	; 0x50
 800537e:	e001      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538c:	2b00      	cmp	r3, #0
 800538e:	d042      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005398:	d02b      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800539a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539e:	d825      	bhi.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053a0:	2bc0      	cmp	r3, #192	; 0xc0
 80053a2:	d028      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053a4:	2bc0      	cmp	r3, #192	; 0xc0
 80053a6:	d821      	bhi.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053a8:	2b80      	cmp	r3, #128	; 0x80
 80053aa:	d016      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d81d      	bhi.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d007      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80053b8:	e018      	b.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ba:	4b66      	ldr	r3, [pc, #408]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	4a65      	ldr	r2, [pc, #404]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053c6:	e017      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 ff68 	bl	80072a4 <RCCEx_PLL2_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053d8:	e00e      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3324      	adds	r3, #36	; 0x24
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f002 f811 	bl	8007408 <RCCEx_PLL3_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80053ea:	e005      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
      break;
 80053f0:	e002      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80053f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80053fe:	4b55      	ldr	r3, [pc, #340]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005402:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	4952      	ldr	r1, [pc, #328]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	650b      	str	r3, [r1, #80]	; 0x50
 8005410:	e001      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541e:	2b00      	cmp	r3, #0
 8005420:	d049      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800542c:	d030      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800542e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005432:	d82a      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005434:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005438:	d02c      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800543a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800543e:	d824      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005444:	d018      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544a:	d81e      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005454:	d007      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005456:	e018      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005458:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a3d      	ldr	r2, [pc, #244]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005464:	e017      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f001 ff19 	bl	80072a4 <RCCEx_PLL2_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005476:	e00e      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3324      	adds	r3, #36	; 0x24
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f001 ffc2 	bl	8007408 <RCCEx_PLL3_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005488:	e005      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
      break;
 800548e:	e002      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054aa:	492a      	ldr	r1, [pc, #168]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	658b      	str	r3, [r1, #88]	; 0x58
 80054b0:	e001      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04c      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054cc:	d030      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80054ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d2:	d82a      	bhi.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054d8:	d02c      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80054da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054de:	d824      	bhi.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054e4:	d018      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80054e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ea:	d81e      	bhi.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80054f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f4:	d007      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80054f6:	e018      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f8:	4b16      	ldr	r3, [pc, #88]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4a15      	ldr	r2, [pc, #84]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005502:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005504:	e017      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3304      	adds	r3, #4
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f001 fec9 	bl	80072a4 <RCCEx_PLL2_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005516:	e00e      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3324      	adds	r3, #36	; 0x24
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f001 ff72 	bl	8007408 <RCCEx_PLL3_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005528:	e005      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
      break;
 800552e:	e002      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005530:	bf00      	nop
 8005532:	e000      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10d      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800553e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005540:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800554a:	4902      	ldr	r1, [pc, #8]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800554c:	4313      	orrs	r3, r2
 800554e:	658b      	str	r3, [r1, #88]	; 0x58
 8005550:	e004      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005552:	bf00      	nop
 8005554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d032      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556c:	2b30      	cmp	r3, #48	; 0x30
 800556e:	d01c      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005570:	2b30      	cmp	r3, #48	; 0x30
 8005572:	d817      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005574:	2b20      	cmp	r3, #32
 8005576:	d00c      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005578:	2b20      	cmp	r3, #32
 800557a:	d813      	bhi.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d016      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005580:	2b10      	cmp	r3, #16
 8005582:	d10f      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005584:	4baf      	ldr	r3, [pc, #700]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	4aae      	ldr	r2, [pc, #696]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800558a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005590:	e00e      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	2102      	movs	r1, #2
 8005598:	4618      	mov	r0, r3
 800559a:	f001 fe83 	bl	80072a4 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80055a2:	e005      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
      break;
 80055a8:	e002      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80055aa:	bf00      	nop
 80055ac:	e000      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80055ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055b6:	4ba3      	ldr	r3, [pc, #652]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c2:	49a0      	ldr	r1, [pc, #640]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055c8:	e001      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d047      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e2:	d030      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80055e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e8:	d82a      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80055ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ee:	d02c      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80055f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055f4:	d824      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80055f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fa:	d018      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80055fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005600:	d81e      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	d007      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800560c:	e018      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560e:	4b8d      	ldr	r3, [pc, #564]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	4a8c      	ldr	r2, [pc, #560]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005618:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800561a:	e017      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fe3e 	bl	80072a4 <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800562c:	e00e      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3324      	adds	r3, #36	; 0x24
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fee7 	bl	8007408 <RCCEx_PLL3_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800563e:	e005      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	e002      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005646:	bf00      	nop
 8005648:	e000      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800564a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005652:	4b7c      	ldr	r3, [pc, #496]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565e:	4979      	ldr	r1, [pc, #484]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005660:	4313      	orrs	r3, r2
 8005662:	650b      	str	r3, [r1, #80]	; 0x50
 8005664:	e001      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005666:	7dfb      	ldrb	r3, [r7, #23]
 8005668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d049      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800567e:	d02e      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005684:	d828      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800568a:	d02a      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800568c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005690:	d822      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005692:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005696:	d026      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005698:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800569c:	d81c      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800569e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a2:	d010      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80056a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056a8:	d816      	bhi.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d111      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	2101      	movs	r1, #1
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 fdf2 	bl	80072a4 <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056c4:	e012      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3324      	adds	r3, #36	; 0x24
 80056ca:	2101      	movs	r1, #1
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fe9b 	bl	8007408 <RCCEx_PLL3_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80056d6:	e009      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	75fb      	strb	r3, [r7, #23]
      break;
 80056dc:	e006      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056de:	bf00      	nop
 80056e0:	e004      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80056ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d109      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056f2:	4b54      	ldr	r3, [pc, #336]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fe:	4951      	ldr	r1, [pc, #324]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005700:	4313      	orrs	r3, r2
 8005702:	650b      	str	r3, [r1, #80]	; 0x50
 8005704:	e001      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d04b      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800571c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005720:	d02e      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005726:	d828      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d02a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005732:	d822      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005734:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005738:	d026      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800573a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800573e:	d81c      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005744:	d010      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574a:	d816      	bhi.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01d      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005754:	d111      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3304      	adds	r3, #4
 800575a:	2101      	movs	r1, #1
 800575c:	4618      	mov	r0, r3
 800575e:	f001 fda1 	bl	80072a4 <RCCEx_PLL2_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005766:	e012      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fe4a 	bl	8007408 <RCCEx_PLL3_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005778:	e009      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	75fb      	strb	r3, [r7, #23]
      break;
 800577e:	e006      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005780:	bf00      	nop
 8005782:	e004      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005784:	bf00      	nop
 8005786:	e002      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800578c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005794:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057a2:	4928      	ldr	r1, [pc, #160]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	658b      	str	r3, [r1, #88]	; 0x58
 80057a8:	e001      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d02f      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c2:	d00e      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80057c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c8:	d814      	bhi.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d015      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d2:	d10f      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b1b      	ldr	r3, [pc, #108]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2101      	movs	r1, #1
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 fd5b 	bl	80072a4 <RCCEx_PLL2_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80057f2:	e003      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80057fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005806:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580e:	490d      	ldr	r1, [pc, #52]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005810:	4313      	orrs	r3, r2
 8005812:	650b      	str	r3, [r1, #80]	; 0x50
 8005814:	e001      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d033      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	2b03      	cmp	r3, #3
 800582c:	d81c      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	0800586f 	.word	0x0800586f
 8005838:	08005849 	.word	0x08005849
 800583c:	08005857 	.word	0x08005857
 8005840:	0800586f 	.word	0x0800586f
 8005844:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005848:	4bb8      	ldr	r3, [pc, #736]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	4ab7      	ldr	r2, [pc, #732]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800584e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005854:	e00c      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3304      	adds	r3, #4
 800585a:	2102      	movs	r1, #2
 800585c:	4618      	mov	r0, r3
 800585e:	f001 fd21 	bl	80072a4 <RCCEx_PLL2_Config>
 8005862:	4603      	mov	r3, r0
 8005864:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005866:	e003      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
      break;
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800586e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005876:	4bad      	ldr	r3, [pc, #692]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587a:	f023 0203 	bic.w	r2, r3, #3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	49aa      	ldr	r1, [pc, #680]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005884:	4313      	orrs	r3, r2
 8005886:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005888:	e001      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8086 	beq.w	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800589c:	4ba4      	ldr	r3, [pc, #656]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4aa3      	ldr	r2, [pc, #652]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80058a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058a8:	f7fc fabe 	bl	8001e28 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058ae:	e009      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b0:	f7fc faba 	bl	8001e28 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b64      	cmp	r3, #100	; 0x64
 80058bc:	d902      	bls.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	75fb      	strb	r3, [r7, #23]
        break;
 80058c2:	e005      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c4:	4b9a      	ldr	r3, [pc, #616]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0ef      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d166      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058d6:	4b95      	ldr	r3, [pc, #596]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058e0:	4053      	eors	r3, r2
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d013      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ea:	4b90      	ldr	r3, [pc, #576]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058f4:	4b8d      	ldr	r3, [pc, #564]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f8:	4a8c      	ldr	r2, [pc, #560]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005900:	4b8a      	ldr	r3, [pc, #552]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005904:	4a89      	ldr	r2, [pc, #548]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800590c:	4a87      	ldr	r2, [pc, #540]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591c:	d115      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fc fa83 	bl	8001e28 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005924:	e00b      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005926:	f7fc fa7f 	bl	8001e28 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	f241 3288 	movw	r2, #5000	; 0x1388
 8005934:	4293      	cmp	r3, r2
 8005936:	d902      	bls.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	75fb      	strb	r3, [r7, #23]
            break;
 800593c:	e005      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800593e:	4b7b      	ldr	r3, [pc, #492]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ed      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d126      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595e:	d10d      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005960:	4b72      	ldr	r3, [pc, #456]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800596e:	0919      	lsrs	r1, r3, #4
 8005970:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005972:	400b      	ands	r3, r1
 8005974:	496d      	ldr	r1, [pc, #436]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	610b      	str	r3, [r1, #16]
 800597a:	e005      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800597c:	4b6b      	ldr	r3, [pc, #428]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	4a6a      	ldr	r2, [pc, #424]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005982:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005986:	6113      	str	r3, [r2, #16]
 8005988:	4b68      	ldr	r3, [pc, #416]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800598a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005996:	4965      	ldr	r1, [pc, #404]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	670b      	str	r3, [r1, #112]	; 0x70
 800599c:	e004      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	75bb      	strb	r3, [r7, #22]
 80059a2:	e001      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d07e      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b8:	2b28      	cmp	r3, #40	; 0x28
 80059ba:	d867      	bhi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80059bc:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	08005a93 	.word	0x08005a93
 80059c8:	08005a8d 	.word	0x08005a8d
 80059cc:	08005a8d 	.word	0x08005a8d
 80059d0:	08005a8d 	.word	0x08005a8d
 80059d4:	08005a8d 	.word	0x08005a8d
 80059d8:	08005a8d 	.word	0x08005a8d
 80059dc:	08005a8d 	.word	0x08005a8d
 80059e0:	08005a8d 	.word	0x08005a8d
 80059e4:	08005a69 	.word	0x08005a69
 80059e8:	08005a8d 	.word	0x08005a8d
 80059ec:	08005a8d 	.word	0x08005a8d
 80059f0:	08005a8d 	.word	0x08005a8d
 80059f4:	08005a8d 	.word	0x08005a8d
 80059f8:	08005a8d 	.word	0x08005a8d
 80059fc:	08005a8d 	.word	0x08005a8d
 8005a00:	08005a8d 	.word	0x08005a8d
 8005a04:	08005a7b 	.word	0x08005a7b
 8005a08:	08005a8d 	.word	0x08005a8d
 8005a0c:	08005a8d 	.word	0x08005a8d
 8005a10:	08005a8d 	.word	0x08005a8d
 8005a14:	08005a8d 	.word	0x08005a8d
 8005a18:	08005a8d 	.word	0x08005a8d
 8005a1c:	08005a8d 	.word	0x08005a8d
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005a93 	.word	0x08005a93
 8005a28:	08005a8d 	.word	0x08005a8d
 8005a2c:	08005a8d 	.word	0x08005a8d
 8005a30:	08005a8d 	.word	0x08005a8d
 8005a34:	08005a8d 	.word	0x08005a8d
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	08005a8d 	.word	0x08005a8d
 8005a40:	08005a8d 	.word	0x08005a8d
 8005a44:	08005a93 	.word	0x08005a93
 8005a48:	08005a8d 	.word	0x08005a8d
 8005a4c:	08005a8d 	.word	0x08005a8d
 8005a50:	08005a8d 	.word	0x08005a8d
 8005a54:	08005a8d 	.word	0x08005a8d
 8005a58:	08005a8d 	.word	0x08005a8d
 8005a5c:	08005a8d 	.word	0x08005a8d
 8005a60:	08005a8d 	.word	0x08005a8d
 8005a64:	08005a93 	.word	0x08005a93
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fc18 	bl	80072a4 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3324      	adds	r3, #36	; 0x24
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 fcc1 	bl	8007408 <RCCEx_PLL3_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d109      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa6:	4921      	ldr	r1, [pc, #132]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8005aac:	e001      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d03e      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d820      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005ac6:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b0f 	.word	0x08005b0f
 8005ad0:	08005ae5 	.word	0x08005ae5
 8005ad4:	08005af7 	.word	0x08005af7
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005b0f 	.word	0x08005b0f
 8005ae0:	08005b0f 	.word	0x08005b0f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 fbda 	bl	80072a4 <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005af4:	e00c      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3324      	adds	r3, #36	; 0x24
 8005afa:	2101      	movs	r1, #1
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 fc83 	bl	8007408 <RCCEx_PLL3_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005b06:	e003      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d110      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	f023 0207 	bic.w	r2, r3, #7
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b22:	4902      	ldr	r1, [pc, #8]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	654b      	str	r3, [r1, #84]	; 0x54
 8005b28:	e008      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005b2a:	bf00      	nop
 8005b2c:	58024400 	.word	0x58024400
 8005b30:	58024800 	.word	0x58024800
 8005b34:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d039      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d820      	bhi.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b9b 	.word	0x08005b9b
 8005b5c:	08005b71 	.word	0x08005b71
 8005b60:	08005b83 	.word	0x08005b83
 8005b64:	08005b9b 	.word	0x08005b9b
 8005b68:	08005b9b 	.word	0x08005b9b
 8005b6c:	08005b9b 	.word	0x08005b9b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fb94 	bl	80072a4 <RCCEx_PLL2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b80:	e00c      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3324      	adds	r3, #36	; 0x24
 8005b86:	2101      	movs	r1, #1
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fc3d 	bl	8007408 <RCCEx_PLL3_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	75fb      	strb	r3, [r7, #23]
      break;
 8005b98:	e000      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ba2:	4bb7      	ldr	r3, [pc, #732]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	f023 0207 	bic.w	r2, r3, #7
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb0:	49b3      	ldr	r1, [pc, #716]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	658b      	str	r3, [r1, #88]	; 0x58
 8005bb6:	e001      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d04b      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd2:	d02e      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd8:	d828      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bde:	d02a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d822      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bea:	d026      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005bf0:	d81c      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf6:	d010      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfc:	d816      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01d      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c06:	d111      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fb48 	bl	80072a4 <RCCEx_PLL2_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c18:	e012      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3324      	adds	r3, #36	; 0x24
 8005c1e:	2102      	movs	r1, #2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 fbf1 	bl	8007408 <RCCEx_PLL3_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005c2a:	e009      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c30:	e006      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c32:	bf00      	nop
 8005c34:	e004      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c36:	bf00      	nop
 8005c38:	e002      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c46:	4b8e      	ldr	r3, [pc, #568]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c54:	498a      	ldr	r1, [pc, #552]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	654b      	str	r3, [r1, #84]	; 0x54
 8005c5a:	e001      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
 8005c5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d04b      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c76:	d02e      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005c78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c7c:	d828      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	d02a      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c88:	d822      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c8e:	d026      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c94:	d81c      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9a:	d010      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca0:	d816      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01d      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005caa:	d111      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 faf6 	bl	80072a4 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005cbc:	e012      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3324      	adds	r3, #36	; 0x24
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fb9f 	bl	8007408 <RCCEx_PLL3_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005cce:	e009      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd4:	e006      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e004      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e002      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cea:	4b65      	ldr	r3, [pc, #404]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cf8:	4961      	ldr	r1, [pc, #388]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	658b      	str	r3, [r1, #88]	; 0x58
 8005cfe:	e001      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d04b      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d1a:	d02e      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005d1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005d20:	d828      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d26:	d02a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2c:	d822      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d32:	d026      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005d34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005d38:	d81c      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d3e:	d010      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d44:	d816      	bhi.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01d      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4e:	d111      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	2100      	movs	r1, #0
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 faa4 	bl	80072a4 <RCCEx_PLL2_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d60:	e012      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3324      	adds	r3, #36	; 0x24
 8005d66:	2102      	movs	r1, #2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fb4d 	bl	8007408 <RCCEx_PLL3_Config>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d72:	e009      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	75fb      	strb	r3, [r7, #23]
      break;
 8005d78:	e006      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e004      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d7e:	bf00      	nop
 8005d80:	e002      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d82:	bf00      	nop
 8005d84:	e000      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d8e:	4b3c      	ldr	r3, [pc, #240]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d9c:	4938      	ldr	r1, [pc, #224]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	658b      	str	r3, [r1, #88]	; 0x58
 8005da2:	e001      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbe:	d10a      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3324      	adds	r3, #36	; 0x24
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fb1e 	bl	8007408 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005dd6:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de4:	4926      	ldr	r1, [pc, #152]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e00:	d10a      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3324      	adds	r3, #36	; 0x24
 8005e06:	2102      	movs	r1, #2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fafd 	bl	8007408 <RCCEx_PLL3_Config>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e18:	4b19      	ldr	r3, [pc, #100]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e26:	4916      	ldr	r1, [pc, #88]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d036      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e42:	d01f      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e48:	d817      	bhi.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e52:	d009      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005e54:	e011      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fa21 	bl	80072a4 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e66:	e00e      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3324      	adds	r3, #36	; 0x24
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 faca 	bl	8007408 <RCCEx_PLL3_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e78:	e005      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7e:	e002      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005e80:	58024400 	.word	0x58024400
      break;
 8005e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e8c:	4b93      	ldr	r3, [pc, #588]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e9a:	4990      	ldr	r1, [pc, #576]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	658b      	str	r3, [r1, #88]	; 0x58
 8005ea0:	e001      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d033      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ebc:	d01c      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005ebe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ec2:	d816      	bhi.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec8:	d003      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ece:	d007      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005ed0:	e00f      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed2:	4b82      	ldr	r3, [pc, #520]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a81      	ldr	r2, [pc, #516]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ede:	e00c      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fa8e 	bl	8007408 <RCCEx_PLL3_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ef0:	e003      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ef6:	e000      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10a      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f00:	4b76      	ldr	r3, [pc, #472]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0e:	4973      	ldr	r1, [pc, #460]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	654b      	str	r3, [r1, #84]	; 0x54
 8005f14:	e001      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
 8005f18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d029      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f32:	d007      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005f34:	e00f      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f36:	4b69      	ldr	r3, [pc, #420]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	4a68      	ldr	r2, [pc, #416]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f42:	e00b      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	2102      	movs	r1, #2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 f9aa 	bl	80072a4 <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005f54:	e002      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005f62:	4b5e      	ldr	r3, [pc, #376]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	495b      	ldr	r1, [pc, #364]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f74:	e001      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3324      	adds	r3, #36	; 0x24
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f001 fa3b 	bl	8007408 <RCCEx_PLL3_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d030      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb0:	d017      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005fb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb6:	d811      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fbc:	d013      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc2:	d80b      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d010      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fce:	4b43      	ldr	r3, [pc, #268]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	4a42      	ldr	r2, [pc, #264]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005fda:	e007      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe0:	e004      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e002      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e000      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fec:	7dfb      	ldrb	r3, [r7, #23]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ff2:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ffe:	4937      	ldr	r1, [pc, #220]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	654b      	str	r3, [r1, #84]	; 0x54
 8006004:	e001      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d008      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	492e      	ldr	r1, [pc, #184]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006034:	4b29      	ldr	r3, [pc, #164]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006042:	4926      	ldr	r1, [pc, #152]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006044:	4313      	orrs	r3, r2
 8006046:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d008      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006054:	4b21      	ldr	r3, [pc, #132]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006058:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006060:	491e      	ldr	r1, [pc, #120]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006062:	4313      	orrs	r3, r2
 8006064:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00d      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	4a19      	ldr	r2, [pc, #100]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800607c:	6113      	str	r3, [r2, #16]
 800607e:	4b17      	ldr	r3, [pc, #92]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006088:	4914      	ldr	r1, [pc, #80]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da08      	bge.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a2:	490e      	ldr	r1, [pc, #56]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	4906      	ldr	r1, [pc, #24]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80060c8:	7dbb      	ldrb	r3, [r7, #22]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	58024400 	.word	0x58024400

080060e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b090      	sub	sp, #64	; 0x40
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ee:	f040 8095 	bne.w	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80060f2:	4bae      	ldr	r3, [pc, #696]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80060f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	633b      	str	r3, [r7, #48]	; 0x30
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2b04      	cmp	r3, #4
 8006100:	f200 8088 	bhi.w	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006121 	.word	0x08006121
 8006110:	08006149 	.word	0x08006149
 8006114:	08006171 	.word	0x08006171
 8006118:	0800620d 	.word	0x0800620d
 800611c:	08006199 	.word	0x08006199

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006120:	4ba2      	ldr	r3, [pc, #648]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800612c:	d108      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800612e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ff64 	bl	8007000 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800613c:	f000 bc95 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006144:	f000 bc91 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006148:	4b98      	ldr	r3, [pc, #608]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006154:	d108      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006156:	f107 0318 	add.w	r3, r7, #24
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fca8 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006164:	f000 bc81 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800616c:	f000 bc7d 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006170:	4b8e      	ldr	r3, [pc, #568]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617c:	d108      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617e:	f107 030c 	add.w	r3, r7, #12
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fde8 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800618c:	f000 bc6d 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006194:	f000 bc69 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006198:	4b84      	ldr	r3, [pc, #528]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800619a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061a2:	4b82      	ldr	r3, [pc, #520]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d10c      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d109      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061b4:	4b7d      	ldr	r3, [pc, #500]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	4a7c      	ldr	r2, [pc, #496]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
 80061c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c6:	e01f      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061c8:	4b78      	ldr	r3, [pc, #480]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d4:	d106      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80061d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061dc:	d102      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80061de:	4b75      	ldr	r3, [pc, #468]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e2:	e011      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061e4:	4b71      	ldr	r3, [pc, #452]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f0:	d106      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f8:	d102      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80061fa:	4b6f      	ldr	r3, [pc, #444]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fe:	e003      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006204:	f000 bc31 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006208:	f000 bc2f 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800620c:	4b6b      	ldr	r3, [pc, #428]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006210:	f000 bc2b 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006218:	f000 bc27 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006222:	f040 8095 	bne.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006226:	4b61      	ldr	r3, [pc, #388]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800622e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006236:	d04d      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623e:	f200 8084 	bhi.w	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	2bc0      	cmp	r3, #192	; 0xc0
 8006246:	d07d      	beq.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2bc0      	cmp	r3, #192	; 0xc0
 800624c:	d87d      	bhi.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	d02d      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	2b80      	cmp	r3, #128	; 0x80
 8006258:	d877      	bhi.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	2b40      	cmp	r3, #64	; 0x40
 8006264:	d012      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006266:	e070      	b.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006268:	4b50      	ldr	r3, [pc, #320]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006274:	d107      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fec0 	bl	8007000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006284:	e3f1      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800628a:	e3ee      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800628c:	4b47      	ldr	r3, [pc, #284]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006298:	d107      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800629a:	f107 0318 	add.w	r3, r7, #24
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fc06 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062a8:	e3df      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062ae:	e3dc      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062b0:	4b3e      	ldr	r3, [pc, #248]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062bc:	d107      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062be:	f107 030c 	add.w	r3, r7, #12
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fd48 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062cc:	e3cd      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062d2:	e3ca      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80062d4:	4b35      	ldr	r3, [pc, #212]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062de:	4b33      	ldr	r3, [pc, #204]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d10c      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062f0:	4b2e      	ldr	r3, [pc, #184]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	08db      	lsrs	r3, r3, #3
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	4a2d      	ldr	r2, [pc, #180]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006302:	e01e      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006310:	d106      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006318:	d102      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800631a:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800631c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631e:	e010      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006320:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632c:	d106      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006334:	d102      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006340:	e393      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006342:	e392      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006344:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006348:	e38f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800634e:	e38c      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006356:	f040 80a7 	bne.w	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800635a:	4b14      	ldr	r3, [pc, #80]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006362:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800636a:	d05f      	beq.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006372:	f200 8096 	bhi.w	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800637c:	f000 808e 	beq.w	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006386:	f200 808c 	bhi.w	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006390:	d03a      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006398:	f200 8083 	bhi.w	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00e      	beq.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a8:	d01c      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80063aa:	e07a      	b.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80063ac:	58024400 	.word	0x58024400
 80063b0:	03d09000 	.word	0x03d09000
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	017d7840 	.word	0x017d7840
 80063bc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063c0:	4baa      	ldr	r3, [pc, #680]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063cc:	d107      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fe14 	bl	8007000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063dc:	e345      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e2:	e342      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063e4:	4ba1      	ldr	r3, [pc, #644]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f0:	d107      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f2:	f107 0318 	add.w	r3, r7, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fb5a 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006400:	e333      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006406:	e330      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006408:	4b98      	ldr	r3, [pc, #608]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006414:	d107      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fc9c 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006424:	e321      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800642a:	e31e      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800642c:	4b8f      	ldr	r3, [pc, #572]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800642e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006434:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006436:	4b8d      	ldr	r3, [pc, #564]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d10c      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006448:	4b88      	ldr	r3, [pc, #544]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	08db      	lsrs	r3, r3, #3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	4a87      	ldr	r2, [pc, #540]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645a:	e01e      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800645c:	4b83      	ldr	r3, [pc, #524]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006468:	d106      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006470:	d102      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006472:	4b80      	ldr	r3, [pc, #512]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006476:	e010      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006478:	4b7c      	ldr	r3, [pc, #496]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006484:	d106      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800648c:	d102      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800648e:	4b7a      	ldr	r3, [pc, #488]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006492:	e002      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006498:	e2e7      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800649a:	e2e6      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800649c:	4b77      	ldr	r3, [pc, #476]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a0:	e2e3      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a6:	e2e0      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ae:	f040 809c 	bne.w	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80064b2:	4b6e      	ldr	r3, [pc, #440]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064c2:	d054      	beq.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ca:	f200 808b 	bhi.w	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064d4:	f000 8083 	beq.w	80065de <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064de:	f200 8081 	bhi.w	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064e8:	d02f      	beq.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064f0:	d878      	bhi.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064fe:	d012      	beq.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006500:	e070      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006502:	4b5a      	ldr	r3, [pc, #360]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800650e:	d107      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fd73 	bl	8007000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800651e:	e2a4      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006524:	e2a1      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006526:	4b51      	ldr	r3, [pc, #324]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800652e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006532:	d107      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006534:	f107 0318 	add.w	r3, r7, #24
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fab9 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006542:	e292      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006548:	e28f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800654a:	4b48      	ldr	r3, [pc, #288]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006556:	d107      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006558:	f107 030c 	add.w	r3, r7, #12
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fbfb 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006566:	e280      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800656c:	e27d      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800656e:	4b3f      	ldr	r3, [pc, #252]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006576:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006578:	4b3c      	ldr	r3, [pc, #240]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d10c      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800658a:	4b38      	ldr	r3, [pc, #224]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	08db      	lsrs	r3, r3, #3
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	4a36      	ldr	r2, [pc, #216]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006596:	fa22 f303 	lsr.w	r3, r2, r3
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800659c:	e01e      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800659e:	4b33      	ldr	r3, [pc, #204]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d106      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065b2:	d102      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80065b4:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b8:	e010      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065ba:	4b2c      	ldr	r3, [pc, #176]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065c6:	d106      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ce:	d102      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065d0:	4b29      	ldr	r3, [pc, #164]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d4:	e002      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065da:	e246      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80065dc:	e245      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065de:	4b27      	ldr	r3, [pc, #156]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065e2:	e242      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065e8:	e23f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f0:	f040 80a8 	bne.w	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80065f4:	4b1d      	ldr	r3, [pc, #116]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80065f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006604:	d060      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800660c:	f200 8097 	bhi.w	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006616:	f000 808f 	beq.w	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006620:	f200 808d 	bhi.w	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662a:	d03b      	beq.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006632:	f200 8084 	bhi.w	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006642:	d01d      	beq.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006644:	e07b      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006652:	d107      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fcd1 	bl	8007000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006662:	e202      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006668:	e1ff      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
 8006670:	03d09000 	.word	0x03d09000
 8006674:	003d0900 	.word	0x003d0900
 8006678:	017d7840 	.word	0x017d7840
 800667c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006680:	4ba3      	ldr	r3, [pc, #652]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800668c:	d107      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800668e:	f107 0318 	add.w	r3, r7, #24
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fa0c 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800669c:	e1e5      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066a2:	e1e2      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066a4:	4b9a      	ldr	r3, [pc, #616]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b0:	d107      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b2:	f107 030c 	add.w	r3, r7, #12
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fb4e 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066c0:	e1d3      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066c6:	e1d0      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066c8:	4b91      	ldr	r3, [pc, #580]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80066ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066d2:	4b8f      	ldr	r3, [pc, #572]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d10c      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80066de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066e4:	4b8a      	ldr	r3, [pc, #552]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	08db      	lsrs	r3, r3, #3
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	4a89      	ldr	r2, [pc, #548]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f6:	e01e      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066f8:	4b85      	ldr	r3, [pc, #532]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006704:	d106      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800670c:	d102      	bne.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800670e:	4b82      	ldr	r3, [pc, #520]	; (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006712:	e010      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006714:	4b7e      	ldr	r3, [pc, #504]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006720:	d106      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006728:	d102      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800672a:	4b7c      	ldr	r3, [pc, #496]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672e:	e002      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006734:	e199      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006736:	e198      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006738:	4b79      	ldr	r3, [pc, #484]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800673c:	e195      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006742:	e192      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800674a:	d173      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800674c:	4b70      	ldr	r3, [pc, #448]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800674e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006754:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800675c:	d02f      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006764:	d863      	bhi.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006772:	d012      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006774:	e05b      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006776:	4b66      	ldr	r3, [pc, #408]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800677e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006782:	d107      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006784:	f107 0318 	add.w	r3, r7, #24
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f991 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006792:	e16a      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006798:	e167      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800679a:	4b5d      	ldr	r3, [pc, #372]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a6:	d107      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a8:	f107 030c 	add.w	r3, r7, #12
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fad3 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067b6:	e158      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067bc:	e155      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067be:	4b54      	ldr	r3, [pc, #336]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80067c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067c8:	4b51      	ldr	r3, [pc, #324]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d10c      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80067d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067da:	4b4d      	ldr	r3, [pc, #308]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	08db      	lsrs	r3, r3, #3
 80067e0:	f003 0303 	and.w	r3, r3, #3
 80067e4:	4a4b      	ldr	r2, [pc, #300]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067e6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ec:	e01e      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067ee:	4b48      	ldr	r3, [pc, #288]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fa:	d106      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80067fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006802:	d102      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006804:	4b44      	ldr	r3, [pc, #272]	; (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006808:	e010      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800680a:	4b41      	ldr	r3, [pc, #260]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006816:	d106      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800681e:	d102      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006820:	4b3e      	ldr	r3, [pc, #248]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006824:	e002      	b.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800682a:	e11e      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800682c:	e11d      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006832:	e11a      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683a:	d133      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800683c:	4b34      	ldr	r3, [pc, #208]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800683e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006844:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006852:	d012      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006854:	e023      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006856:	4b2e      	ldr	r3, [pc, #184]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006862:	d107      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fbc9 	bl	8007000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006872:	e0fa      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006878:	e0f7      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800687a:	4b25      	ldr	r3, [pc, #148]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006888:	f107 0318 	add.w	r3, r7, #24
 800688c:	4618      	mov	r0, r3
 800688e:	f000 f90f 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006896:	e0e8      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800689c:	e0e5      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068a2:	e0e2      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068aa:	f040 808f 	bne.w	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80068ae:	4b18      	ldr	r3, [pc, #96]	; (8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068be:	d075      	beq.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c6:	d87e      	bhi.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d060      	beq.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d876      	bhi.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068de:	d045      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068e6:	d86e      	bhi.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ee:	d02b      	beq.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f6:	d866      	bhi.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006904:	d00e      	beq.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006906:	e05e      	b.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006908:	f000 f8bc 	bl	8006a84 <HAL_RCCEx_GetD3PCLK1Freq>
 800690c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800690e:	e0ac      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006910:	58024400 	.word	0x58024400
 8006914:	03d09000 	.word	0x03d09000
 8006918:	003d0900 	.word	0x003d0900
 800691c:	017d7840 	.word	0x017d7840
 8006920:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006924:	4b53      	ldr	r3, [pc, #332]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800692c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006930:	d107      	bne.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f8ba 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006940:	e093      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006946:	e090      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006948:	4b4a      	ldr	r3, [pc, #296]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006954:	d107      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4618      	mov	r0, r3
 800695c:	f000 f9fc 	bl	8006d58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006964:	e081      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800696a:	e07e      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800696c:	4b41      	ldr	r3, [pc, #260]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b04      	cmp	r3, #4
 8006976:	d109      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006978:	4b3e      	ldr	r3, [pc, #248]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	08db      	lsrs	r3, r3, #3
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	4a3d      	ldr	r2, [pc, #244]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006984:	fa22 f303 	lsr.w	r3, r2, r3
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800698a:	e06e      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006990:	e06b      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006992:	4b38      	ldr	r3, [pc, #224]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699e:	d102      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80069a0:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069a4:	e061      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069aa:	e05e      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069ac:	4b31      	ldr	r3, [pc, #196]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069b8:	d102      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80069ba:	4b31      	ldr	r3, [pc, #196]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069be:	e054      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c4:	e051      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ca:	e04e      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d2:	d148      	bne.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80069d4:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e4:	d02a      	beq.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ec:	d838      	bhi.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d004      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069fa:	d00d      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80069fc:	e030      	b.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a0a:	d102      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006a0c:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a10:	e02b      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a16:	e028      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a18:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a24:	d107      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fae8 	bl	8007000 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a34:	e019      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3a:	e016      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a48:	d107      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4a:	f107 0318 	add.w	r3, r7, #24
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f82e 	bl	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a58:	e007      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5e:	e004      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a64:	e001      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3740      	adds	r7, #64	; 0x40
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	58024400 	.word	0x58024400
 8006a78:	03d09000 	.word	0x03d09000
 8006a7c:	003d0900 	.word	0x003d0900
 8006a80:	017d7840 	.word	0x017d7840

08006a84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a88:	f7fe fbba 	bl	8005200 <HAL_RCC_GetHCLKFreq>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	4904      	ldr	r1, [pc, #16]	; (8006aac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a9a:	5ccb      	ldrb	r3, [r1, r3]
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	08007bac 	.word	0x08007bac

08006ab0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b089      	sub	sp, #36	; 0x24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ab8:	4ba1      	ldr	r3, [pc, #644]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ac2:	4b9f      	ldr	r3, [pc, #636]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	0b1b      	lsrs	r3, r3, #12
 8006ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006acc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ace:	4b9c      	ldr	r3, [pc, #624]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	091b      	lsrs	r3, r3, #4
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006ada:	4b99      	ldr	r3, [pc, #612]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	08db      	lsrs	r3, r3, #3
 8006ae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 8111 	beq.w	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	f000 8083 	beq.w	8006c0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	f200 80a1 	bhi.w	8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d056      	beq.n	8006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b1a:	e099      	b.n	8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b1c:	4b88      	ldr	r3, [pc, #544]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d02d      	beq.n	8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b28:	4b85      	ldr	r3, [pc, #532]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	08db      	lsrs	r3, r3, #3
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	4a84      	ldr	r2, [pc, #528]	; (8006d44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b34:	fa22 f303 	lsr.w	r3, r2, r3
 8006b38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b52:	4b7b      	ldr	r3, [pc, #492]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b82:	e087      	b.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b96:	4b6a      	ldr	r3, [pc, #424]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006baa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bc6:	e065      	b.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	ee07 3a90 	vmov	s15, r3
 8006bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bda:	4b59      	ldr	r3, [pc, #356]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c0a:	e043      	b.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c1e:	4b48      	ldr	r3, [pc, #288]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c4e:	e021      	b.n	8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c62:	4b37      	ldr	r3, [pc, #220]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c94:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	0a5b      	lsrs	r3, r3, #9
 8006c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cba:	ee17 2a90 	vmov	r2, s15
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	0c1b      	lsrs	r3, r3, #16
 8006cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ccc:	ee07 3a90 	vmov	s15, r3
 8006cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce8:	ee17 2a90 	vmov	r2, s15
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006cf0:	4b13      	ldr	r3, [pc, #76]	; (8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	0e1b      	lsrs	r3, r3, #24
 8006cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d16:	ee17 2a90 	vmov	r2, s15
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d1e:	e008      	b.n	8006d32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	609a      	str	r2, [r3, #8]
}
 8006d32:	bf00      	nop
 8006d34:	3724      	adds	r7, #36	; 0x24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	58024400 	.word	0x58024400
 8006d44:	03d09000 	.word	0x03d09000
 8006d48:	46000000 	.word	0x46000000
 8006d4c:	4c742400 	.word	0x4c742400
 8006d50:	4a742400 	.word	0x4a742400
 8006d54:	4bbebc20 	.word	0x4bbebc20

08006d58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b089      	sub	sp, #36	; 0x24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d60:	4ba1      	ldr	r3, [pc, #644]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d6a:	4b9f      	ldr	r3, [pc, #636]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	0d1b      	lsrs	r3, r3, #20
 8006d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d76:	4b9c      	ldr	r3, [pc, #624]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d82:	4b99      	ldr	r3, [pc, #612]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	08db      	lsrs	r3, r3, #3
 8006d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8111 	beq.w	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	f000 8083 	beq.w	8006eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f200 80a1 	bhi.w	8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d056      	beq.n	8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006dc2:	e099      	b.n	8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc4:	4b88      	ldr	r3, [pc, #544]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d02d      	beq.n	8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dd0:	4b85      	ldr	r3, [pc, #532]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	4a84      	ldr	r2, [pc, #528]	; (8006fec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8006de0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e2a:	e087      	b.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b6a      	ldr	r3, [pc, #424]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e52:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e6e:	e065      	b.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b59      	ldr	r3, [pc, #356]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e96:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eb2:	e043      	b.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec6:	4b48      	ldr	r3, [pc, #288]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eda:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef6:	e021      	b.n	8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0a:	4b37      	ldr	r3, [pc, #220]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f3c:	4b2a      	ldr	r3, [pc, #168]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	0a5b      	lsrs	r3, r3, #9
 8006f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f62:	ee17 2a90 	vmov	r2, s15
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f6a:	4b1f      	ldr	r3, [pc, #124]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f90:	ee17 2a90 	vmov	r2, s15
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f98:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	0e1b      	lsrs	r3, r3, #24
 8006f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fbe:	ee17 2a90 	vmov	r2, s15
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fc6:	e008      	b.n	8006fda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	609a      	str	r2, [r3, #8]
}
 8006fda:	bf00      	nop
 8006fdc:	3724      	adds	r7, #36	; 0x24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	03d09000 	.word	0x03d09000
 8006ff0:	46000000 	.word	0x46000000
 8006ff4:	4c742400 	.word	0x4c742400
 8006ff8:	4a742400 	.word	0x4a742400
 8006ffc:	4bbebc20 	.word	0x4bbebc20

08007000 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	; 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007008:	4ba0      	ldr	r3, [pc, #640]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007012:	4b9e      	ldr	r3, [pc, #632]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	091b      	lsrs	r3, r3, #4
 8007018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800701c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800701e:	4b9b      	ldr	r3, [pc, #620]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007028:	4b98      	ldr	r3, [pc, #608]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800702a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702c:	08db      	lsrs	r3, r3, #3
 800702e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	ee07 3a90 	vmov	s15, r3
 800703c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007040:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 8111 	beq.w	800726e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b02      	cmp	r3, #2
 8007050:	f000 8083 	beq.w	800715a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	2b02      	cmp	r3, #2
 8007058:	f200 80a1 	bhi.w	800719e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d056      	beq.n	8007116 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007068:	e099      	b.n	800719e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800706a:	4b88      	ldr	r3, [pc, #544]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	d02d      	beq.n	80070d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007076:	4b85      	ldr	r3, [pc, #532]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	08db      	lsrs	r3, r3, #3
 800707c:	f003 0303 	and.w	r3, r3, #3
 8007080:	4a83      	ldr	r2, [pc, #524]	; (8007290 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a0:	4b7a      	ldr	r3, [pc, #488]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007294 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070d0:	e087      	b.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	ee07 3a90 	vmov	s15, r3
 80070d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e4:	4b69      	ldr	r3, [pc, #420]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007294 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007110:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007114:	e065      	b.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	ee07 3a90 	vmov	s15, r3
 800711c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007120:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800729c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007128:	4b58      	ldr	r3, [pc, #352]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007138:	ed97 6a03 	vldr	s12, [r7, #12]
 800713c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007294 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800714c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007154:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007158:	e043      	b.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007164:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80072a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716c:	4b47      	ldr	r3, [pc, #284]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007180:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007294 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007198:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800719c:	e021      	b.n	80071e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	ee07 3a90 	vmov	s15, r3
 80071a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b0:	4b36      	ldr	r3, [pc, #216]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007294 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80071e2:	4b2a      	ldr	r3, [pc, #168]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	0a5b      	lsrs	r3, r3, #9
 80071e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007208:	ee17 2a90 	vmov	r2, s15
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007210:	4b1e      	ldr	r3, [pc, #120]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800722a:	edd7 6a07 	vldr	s13, [r7, #28]
 800722e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007236:	ee17 2a90 	vmov	r2, s15
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007258:	edd7 6a07 	vldr	s13, [r7, #28]
 800725c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007264:	ee17 2a90 	vmov	r2, s15
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800726c:	e008      	b.n	8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	609a      	str	r2, [r3, #8]
}
 8007280:	bf00      	nop
 8007282:	3724      	adds	r7, #36	; 0x24
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	58024400 	.word	0x58024400
 8007290:	03d09000 	.word	0x03d09000
 8007294:	46000000 	.word	0x46000000
 8007298:	4c742400 	.word	0x4c742400
 800729c:	4a742400 	.word	0x4a742400
 80072a0:	4bbebc20 	.word	0x4bbebc20

080072a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072b2:	4b53      	ldr	r3, [pc, #332]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d101      	bne.n	80072c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e099      	b.n	80073f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072c2:	4b4f      	ldr	r3, [pc, #316]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a4e      	ldr	r2, [pc, #312]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80072c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ce:	f7fa fdab 	bl	8001e28 <HAL_GetTick>
 80072d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072d4:	e008      	b.n	80072e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072d6:	f7fa fda7 	bl	8001e28 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e086      	b.n	80073f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072e8:	4b45      	ldr	r3, [pc, #276]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1f0      	bne.n	80072d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072f4:	4b42      	ldr	r3, [pc, #264]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	493f      	ldr	r1, [pc, #252]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007304:	4313      	orrs	r3, r2
 8007306:	628b      	str	r3, [r1, #40]	; 0x28
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	3b01      	subs	r3, #1
 800730e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	3b01      	subs	r3, #1
 8007318:	025b      	lsls	r3, r3, #9
 800731a:	b29b      	uxth	r3, r3
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	3b01      	subs	r3, #1
 8007324:	041b      	lsls	r3, r3, #16
 8007326:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	3b01      	subs	r3, #1
 8007332:	061b      	lsls	r3, r3, #24
 8007334:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007338:	4931      	ldr	r1, [pc, #196]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 800733a:	4313      	orrs	r3, r2
 800733c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800733e:	4b30      	ldr	r3, [pc, #192]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	492d      	ldr	r1, [pc, #180]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 800734c:	4313      	orrs	r3, r2
 800734e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007350:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	f023 0220 	bic.w	r2, r3, #32
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	4928      	ldr	r1, [pc, #160]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 800735e:	4313      	orrs	r3, r2
 8007360:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007362:	4b27      	ldr	r3, [pc, #156]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	4a26      	ldr	r2, [pc, #152]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007368:	f023 0310 	bic.w	r3, r3, #16
 800736c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007370:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007372:	4b24      	ldr	r3, [pc, #144]	; (8007404 <RCCEx_PLL2_Config+0x160>)
 8007374:	4013      	ands	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	69d2      	ldr	r2, [r2, #28]
 800737a:	00d2      	lsls	r2, r2, #3
 800737c:	4920      	ldr	r1, [pc, #128]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 800737e:	4313      	orrs	r3, r2
 8007380:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007382:	4b1f      	ldr	r3, [pc, #124]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007388:	f043 0310 	orr.w	r3, r3, #16
 800738c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d106      	bne.n	80073a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007394:	4b1a      	ldr	r3, [pc, #104]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	4a19      	ldr	r2, [pc, #100]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 800739a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800739e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073a0:	e00f      	b.n	80073c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d106      	bne.n	80073b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073a8:	4b15      	ldr	r3, [pc, #84]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	4a14      	ldr	r2, [pc, #80]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80073ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073b4:	e005      	b.n	80073c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	4a11      	ldr	r2, [pc, #68]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80073bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073c2:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a0e      	ldr	r2, [pc, #56]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ce:	f7fa fd2b 	bl	8001e28 <HAL_GetTick>
 80073d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d4:	e008      	b.n	80073e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073d6:	f7fa fd27 	bl	8001e28 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e006      	b.n	80073f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <RCCEx_PLL2_Config+0x15c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f0      	beq.n	80073d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	58024400 	.word	0x58024400
 8007404:	ffff0007 	.word	0xffff0007

08007408 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007416:	4b53      	ldr	r3, [pc, #332]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	2b03      	cmp	r3, #3
 8007420:	d101      	bne.n	8007426 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e099      	b.n	800755a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007426:	4b4f      	ldr	r3, [pc, #316]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a4e      	ldr	r2, [pc, #312]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800742c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007432:	f7fa fcf9 	bl	8001e28 <HAL_GetTick>
 8007436:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007438:	e008      	b.n	800744c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800743a:	f7fa fcf5 	bl	8001e28 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e086      	b.n	800755a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800744c:	4b45      	ldr	r3, [pc, #276]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f0      	bne.n	800743a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007458:	4b42      	ldr	r3, [pc, #264]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	051b      	lsls	r3, r3, #20
 8007466:	493f      	ldr	r1, [pc, #252]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 8007468:	4313      	orrs	r3, r2
 800746a:	628b      	str	r3, [r1, #40]	; 0x28
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	3b01      	subs	r3, #1
 8007472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	3b01      	subs	r3, #1
 800747c:	025b      	lsls	r3, r3, #9
 800747e:	b29b      	uxth	r3, r3
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	3b01      	subs	r3, #1
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	3b01      	subs	r3, #1
 8007496:	061b      	lsls	r3, r3, #24
 8007498:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800749c:	4931      	ldr	r1, [pc, #196]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074a2:	4b30      	ldr	r3, [pc, #192]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	492d      	ldr	r1, [pc, #180]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074b4:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	4928      	ldr	r1, [pc, #160]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074c6:	4b27      	ldr	r3, [pc, #156]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	4a26      	ldr	r2, [pc, #152]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074d2:	4b24      	ldr	r3, [pc, #144]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d6:	4b24      	ldr	r3, [pc, #144]	; (8007568 <RCCEx_PLL3_Config+0x160>)
 80074d8:	4013      	ands	r3, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	69d2      	ldr	r2, [r2, #28]
 80074de:	00d2      	lsls	r2, r2, #3
 80074e0:	4920      	ldr	r1, [pc, #128]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074e6:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074f8:	4b1a      	ldr	r3, [pc, #104]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	4a19      	ldr	r2, [pc, #100]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 80074fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007504:	e00f      	b.n	8007526 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d106      	bne.n	800751a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800750c:	4b15      	ldr	r3, [pc, #84]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800750e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007510:	4a14      	ldr	r2, [pc, #80]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 8007512:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007518:	e005      	b.n	8007526 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800751a:	4b12      	ldr	r3, [pc, #72]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800751c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751e:	4a11      	ldr	r2, [pc, #68]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 8007520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007524:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a0e      	ldr	r2, [pc, #56]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800752c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007532:	f7fa fc79 	bl	8001e28 <HAL_GetTick>
 8007536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007538:	e008      	b.n	800754c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800753a:	f7fa fc75 	bl	8001e28 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e006      	b.n	800755a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <RCCEx_PLL3_Config+0x15c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0f0      	beq.n	800753a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	58024400 	.word	0x58024400
 8007568:	ffff0007 	.word	0xffff0007

0800756c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e049      	b.n	8007612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7fa fb70 	bl	8001c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f000 f9f6 	bl	800799c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b01      	cmp	r3, #1
 800762e:	d001      	beq.n	8007634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e054      	b.n	80076de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a26      	ldr	r2, [pc, #152]	; (80076ec <HAL_TIM_Base_Start_IT+0xd0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d022      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x80>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765e:	d01d      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x80>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a22      	ldr	r2, [pc, #136]	; (80076f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d018      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x80>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a21      	ldr	r2, [pc, #132]	; (80076f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d013      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x80>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1f      	ldr	r2, [pc, #124]	; (80076f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00e      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x80>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a1e      	ldr	r2, [pc, #120]	; (80076fc <HAL_TIM_Base_Start_IT+0xe0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d009      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x80>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1c      	ldr	r2, [pc, #112]	; (8007700 <HAL_TIM_Base_Start_IT+0xe4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_TIM_Base_Start_IT+0x80>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <HAL_TIM_Base_Start_IT+0xe8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d115      	bne.n	80076c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	4b19      	ldr	r3, [pc, #100]	; (8007708 <HAL_TIM_Base_Start_IT+0xec>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d015      	beq.n	80076da <HAL_TIM_Base_Start_IT+0xbe>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b4:	d011      	beq.n	80076da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0201 	orr.w	r2, r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c6:	e008      	b.n	80076da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0201 	orr.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e000      	b.n	80076dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40010400 	.word	0x40010400
 8007700:	40001800 	.word	0x40001800
 8007704:	40014000 	.word	0x40014000
 8007708:	00010007 	.word	0x00010007

0800770c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b02      	cmp	r3, #2
 8007720:	d122      	bne.n	8007768 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b02      	cmp	r3, #2
 800772e:	d11b      	bne.n	8007768 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0202 	mvn.w	r2, #2
 8007738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f905 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 8007754:	e005      	b.n	8007762 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f8f7 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f908 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	f003 0304 	and.w	r3, r3, #4
 8007772:	2b04      	cmp	r3, #4
 8007774:	d122      	bne.n	80077bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b04      	cmp	r3, #4
 8007782:	d11b      	bne.n	80077bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0204 	mvn.w	r2, #4
 800778c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8db 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 80077a8:	e005      	b.n	80077b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f8cd 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f8de 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d122      	bne.n	8007810 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d11b      	bne.n	8007810 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0208 	mvn.w	r2, #8
 80077e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2204      	movs	r2, #4
 80077e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f8b1 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 80077fc:	e005      	b.n	800780a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f8a3 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8b4 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b10      	cmp	r3, #16
 800781c:	d122      	bne.n	8007864 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b10      	cmp	r3, #16
 800782a:	d11b      	bne.n	8007864 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f06f 0210 	mvn.w	r2, #16
 8007834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2208      	movs	r2, #8
 800783a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f887 	bl	800795e <HAL_TIM_IC_CaptureCallback>
 8007850:	e005      	b.n	800785e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f879 	bl	800794a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f88a 	bl	8007972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b01      	cmp	r3, #1
 8007870:	d10e      	bne.n	8007890 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0201 	mvn.w	r2, #1
 8007888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fa f8da 	bl	8001a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d10e      	bne.n	80078bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a8:	2b80      	cmp	r3, #128	; 0x80
 80078aa:	d107      	bne.n	80078bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f914 	bl	8007ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ca:	d10e      	bne.n	80078ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d6:	2b80      	cmp	r3, #128	; 0x80
 80078d8:	d107      	bne.n	80078ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f907 	bl	8007af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	d10e      	bne.n	8007916 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007902:	2b40      	cmp	r3, #64	; 0x40
 8007904:	d107      	bne.n	8007916 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800790e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f838 	bl	8007986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f003 0320 	and.w	r3, r3, #32
 8007920:	2b20      	cmp	r3, #32
 8007922:	d10e      	bne.n	8007942 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f003 0320 	and.w	r3, r3, #32
 800792e:	2b20      	cmp	r3, #32
 8007930:	d107      	bne.n	8007942 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f06f 0220 	mvn.w	r2, #32
 800793a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f8c7 	bl	8007ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a40      	ldr	r2, [pc, #256]	; (8007ab0 <TIM_Base_SetConfig+0x114>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d013      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d00f      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a3d      	ldr	r2, [pc, #244]	; (8007ab4 <TIM_Base_SetConfig+0x118>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00b      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a3c      	ldr	r2, [pc, #240]	; (8007ab8 <TIM_Base_SetConfig+0x11c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a3b      	ldr	r2, [pc, #236]	; (8007abc <TIM_Base_SetConfig+0x120>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_Base_SetConfig+0x40>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3a      	ldr	r2, [pc, #232]	; (8007ac0 <TIM_Base_SetConfig+0x124>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d108      	bne.n	80079ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2f      	ldr	r2, [pc, #188]	; (8007ab0 <TIM_Base_SetConfig+0x114>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01f      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fc:	d01b      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2c      	ldr	r2, [pc, #176]	; (8007ab4 <TIM_Base_SetConfig+0x118>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d017      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2b      	ldr	r2, [pc, #172]	; (8007ab8 <TIM_Base_SetConfig+0x11c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d013      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a2a      	ldr	r2, [pc, #168]	; (8007abc <TIM_Base_SetConfig+0x120>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00f      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a29      	ldr	r2, [pc, #164]	; (8007ac0 <TIM_Base_SetConfig+0x124>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00b      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a28      	ldr	r2, [pc, #160]	; (8007ac4 <TIM_Base_SetConfig+0x128>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <TIM_Base_SetConfig+0x12c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d003      	beq.n	8007a36 <TIM_Base_SetConfig+0x9a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a26      	ldr	r2, [pc, #152]	; (8007acc <TIM_Base_SetConfig+0x130>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d108      	bne.n	8007a48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a10      	ldr	r2, [pc, #64]	; (8007ab0 <TIM_Base_SetConfig+0x114>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00f      	beq.n	8007a94 <TIM_Base_SetConfig+0xf8>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <TIM_Base_SetConfig+0x124>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00b      	beq.n	8007a94 <TIM_Base_SetConfig+0xf8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <TIM_Base_SetConfig+0x128>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d007      	beq.n	8007a94 <TIM_Base_SetConfig+0xf8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a10      	ldr	r2, [pc, #64]	; (8007ac8 <TIM_Base_SetConfig+0x12c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d003      	beq.n	8007a94 <TIM_Base_SetConfig+0xf8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a0f      	ldr	r2, [pc, #60]	; (8007acc <TIM_Base_SetConfig+0x130>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d103      	bne.n	8007a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	615a      	str	r2, [r3, #20]
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800
 8007abc:	40000c00 	.word	0x40000c00
 8007ac0:	40010400 	.word	0x40010400
 8007ac4:	40014000 	.word	0x40014000
 8007ac8:	40014400 	.word	0x40014400
 8007acc:	40014800 	.word	0x40014800

08007ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <__libc_init_array>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	4d0d      	ldr	r5, [pc, #52]	; (8007b44 <__libc_init_array+0x38>)
 8007b10:	4c0d      	ldr	r4, [pc, #52]	; (8007b48 <__libc_init_array+0x3c>)
 8007b12:	1b64      	subs	r4, r4, r5
 8007b14:	10a4      	asrs	r4, r4, #2
 8007b16:	2600      	movs	r6, #0
 8007b18:	42a6      	cmp	r6, r4
 8007b1a:	d109      	bne.n	8007b30 <__libc_init_array+0x24>
 8007b1c:	4d0b      	ldr	r5, [pc, #44]	; (8007b4c <__libc_init_array+0x40>)
 8007b1e:	4c0c      	ldr	r4, [pc, #48]	; (8007b50 <__libc_init_array+0x44>)
 8007b20:	f000 f82e 	bl	8007b80 <_init>
 8007b24:	1b64      	subs	r4, r4, r5
 8007b26:	10a4      	asrs	r4, r4, #2
 8007b28:	2600      	movs	r6, #0
 8007b2a:	42a6      	cmp	r6, r4
 8007b2c:	d105      	bne.n	8007b3a <__libc_init_array+0x2e>
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b34:	4798      	blx	r3
 8007b36:	3601      	adds	r6, #1
 8007b38:	e7ee      	b.n	8007b18 <__libc_init_array+0xc>
 8007b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b3e:	4798      	blx	r3
 8007b40:	3601      	adds	r6, #1
 8007b42:	e7f2      	b.n	8007b2a <__libc_init_array+0x1e>
 8007b44:	08007bbc 	.word	0x08007bbc
 8007b48:	08007bbc 	.word	0x08007bbc
 8007b4c:	08007bbc 	.word	0x08007bbc
 8007b50:	08007bc0 	.word	0x08007bc0

08007b54 <memcpy>:
 8007b54:	440a      	add	r2, r1
 8007b56:	4291      	cmp	r1, r2
 8007b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b5c:	d100      	bne.n	8007b60 <memcpy+0xc>
 8007b5e:	4770      	bx	lr
 8007b60:	b510      	push	{r4, lr}
 8007b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	d1f9      	bne.n	8007b62 <memcpy+0xe>
 8007b6e:	bd10      	pop	{r4, pc}

08007b70 <memset>:
 8007b70:	4402      	add	r2, r0
 8007b72:	4603      	mov	r3, r0
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d100      	bne.n	8007b7a <memset+0xa>
 8007b78:	4770      	bx	lr
 8007b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7e:	e7f9      	b.n	8007b74 <memset+0x4>

08007b80 <_init>:
 8007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b82:	bf00      	nop
 8007b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b86:	bc08      	pop	{r3}
 8007b88:	469e      	mov	lr, r3
 8007b8a:	4770      	bx	lr

08007b8c <_fini>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	bf00      	nop
 8007b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b92:	bc08      	pop	{r3}
 8007b94:	469e      	mov	lr, r3
 8007b96:	4770      	bx	lr
